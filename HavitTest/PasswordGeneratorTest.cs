// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Havit.Security;
namespace HavitTest
{
	/// <summary>
	/// This is a test class for Havit.Security.PasswordGenerator and is intended
	/// to contain all Havit.Security.PasswordGenerator Unit Tests
	///</summary>
	[TestClass()]
	public class PasswordGeneratorTest
	{
		#region GenerateTest_Length
		/// <summary>
		/// A test for Generate (int, int, PasswordCharacterSet, bool, bool) - length
		///</summary>
		[TestMethod()]
		public void GenerateTest_Length()
		{
			int minimumLength = 10;
			int maximumLength = 20;
			PasswordCharacterSet passwordCharacterSet = PasswordCharacterSet.LowerCaseLetters;
			bool allowRepeatingCharacters = false;
			bool allowConsecutiveCharacters = false;

			string actual;

			actual = Havit.Security.PasswordGenerator.Generate(minimumLength, maximumLength, passwordCharacterSet, allowRepeatingCharacters, allowConsecutiveCharacters);

			Assert.IsTrue(actual.Length >= minimumLength);
			Assert.IsTrue(actual.Length <= maximumLength);
		}
		#endregion

		#region GenerateTest_TooLong
		/// <summary>
		/// A test for Generate (int, int, PasswordCharacterSet, bool, bool) - length
		///</summary>
		[TestMethod()]
		[ExpectedException(typeof(InvalidOperationException))]
		public void GenerateTest_TooLong()
		{
			int minimumLength = 100;
			int maximumLength = 100;
			PasswordCharacterSet passwordCharacterSet = PasswordCharacterSet.LowerCaseLetters;
			bool allowRepeatingCharacters = false;
			bool allowConsecutiveCharacters = false;

			string actual;

			actual = Havit.Security.PasswordGenerator.Generate(minimumLength, maximumLength, passwordCharacterSet, allowRepeatingCharacters, allowConsecutiveCharacters);
		}
		#endregion

		#region Testing Infrastructure
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}

		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion
		#endregion
	}
}
