// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Havit.Collections;
namespace HavitTest
{
	/// <summary>
	///This is a test class for GenericPropertyComparer.
	///</summary>
	[TestClass()]
	public class GenericPropertyComparerTest
	{
		#region GenericPropertyComparer_Null
		[TestMethod()]
		public void GenericPropertyComparer_Null()
		{
			var gpc = new GenericPropertyComparer<object>(new SortItem("Nazev", SortDirection.Ascending)) as IComparer<object>;
			Assert.AreEqual(gpc.Compare(null, null), 0);
			Assert.AreEqual(gpc.Compare(DBNull.Value, DBNull.Value), 0);
			Assert.AreEqual(gpc.Compare(DBNull.Value, null), 0);
		}
		#endregion

		#region GenericPropertyComparer_NotNull
		[TestMethod()]
		public void GenericPropertyComparer_NotNull()
		{
			var gpc = new GenericPropertyComparer<object>(new SortItem("Nazev", SortDirection.Ascending)) as IComparer<object>;
			Assert.AreEqual(gpc.Compare(new DataTestClass("A"), new DataTestClass("A")), 0);
			Assert.AreEqual(gpc.Compare(new DataTestClass("A"), new DataTestClass("B")), -1);
			Assert.AreEqual(gpc.Compare(new DataTestClass("B"), new DataTestClass("A")), 1);
		}
		#endregion

		#region GenericPropertyComparer_NotNull
		[TestMethod()]
		public void GenericPropertyComparer_NullAndNotNull()
		{
			var gpc = new GenericPropertyComparer<object>(new SortItem("Nazev", SortDirection.Ascending)) as IComparer<object>;
			Assert.AreEqual(gpc.Compare(new DataTestClass("A"), DBNull.Value), 1);
			Assert.AreEqual(gpc.Compare(DBNull.Value, new DataTestClass("B")), -1);
			Assert.AreEqual(gpc.Compare(new DataTestClass(null), DBNull.Value), 0);
		}
		#endregion

		private class DataTestClass
		{
			public DataTestClass (string nazev)
			{
				this.Nazev = nazev;
			}
			public string Nazev { get; set; }
		}

		#region TestContext
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#endregion

		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion
	}
}
