// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace HavitTest
{
	/// <summary>
	///This is a test class for Havit.MathExt and is intended
	///to contain all Havit.MathExt Unit Tests
	///</summary>
	[TestClass()]
	public class MathExtTest
	{
		#region IsInteger
		/// <summary>
		///A test for IsInteger (string)
		///</summary>
		[TestMethod()]
		public void IsIntegerTest_Null()
		{
			string text = null;

			bool expected = false;
			bool actual;

			actual = Havit.MathExt.IsInteger(text);

			Assert.AreEqual(expected, actual, "Havit.MathExt.IsInteger did not return the expected value.");
		}


		/// <summary>
		///A test for IsInteger (string)
		///</summary>
		[TestMethod()]
		public void IsIntegerTest_PositiveInteger()
		{
			string text = "156";

			bool expected = true;
			bool actual;

			actual = Havit.MathExt.IsInteger(text);

			Assert.AreEqual(expected, actual, "Havit.MathExt.IsInteger did not return the expected value.");
		}


		/// <summary>
		///A test for IsInteger (string)
		///</summary>
		[TestMethod()]
		public void IsIntegerTest_NegativeInteger()
		{
			string text = "-156";

			bool expected = true;
			bool actual;

			actual = Havit.MathExt.IsInteger(text);

			Assert.AreEqual(expected, actual, "Havit.MathExt.IsInteger did not return the expected value.");
		}

		/// <summary>
		///A test for IsInteger (string)
		///</summary>
		[TestMethod()]
		public void IsIntegerTest_Empty()
		{
			string text = String.Empty;

			bool expected = false;
			bool actual;

			actual = Havit.MathExt.IsInteger(text);

			Assert.AreEqual(expected, actual, "Havit.MathExt.IsInteger did not return the expected value.");
		}

		/// <summary>
		///A test for IsInteger (string)
		///</summary>
		[TestMethod()]
		public void IsIntegerTest_Invalid()
		{
			string text = "10.";

			bool expected = false;
			bool actual;

			actual = Havit.MathExt.IsInteger(text);

			Assert.AreEqual(expected, actual, "Havit.MathExt.IsInteger did not return the expected value.");
		}
		#endregion

		#region TestContext
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#endregion

		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion
	}
}
