// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.

using System.Data;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Configuration;
using Havit.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
namespace Havit.DataTest
{
	/// <summary>
	/// This is a test class for Havit.Data.DbConnector and is intended
	/// to contain all Havit.Data.DbConnector Unit Tests
	/// </summary>
	[TestClass]
	public class DbConnectorTest
	{
		#region Constructors
		/// <summary>
		/// A test for DbConnector (ConnectionStringSettings)
		/// </summary>
		[TestMethod]
		public void ConstructorTest_ConnectionStringSettings()
		{
			ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings["Test"];
			DbConnector target = new DbConnector(connectionStringSettings);

            Assert.AreEqual(target.ConnectionString, connectionStringSettings.ConnectionString);
            Assert.AreEqual(target.ProviderFactory.GetType(), typeof(OleDbFactory));
		}

		/// <summary>
		/// A test for DbConnector (string, DbProviderFactory)
		/// </summary>
		[TestMethod]
		public void ConstructorTest_string_DbProviderFactory()
		{
			string connectionString = "Data Source=dev;Initial Catalog=HavitTest;User Id=development;Password=development;";
			DbProviderFactory providerFactory = DbProviderFactories.GetFactory("System.Data.SqlClient");

			DbConnector target = new DbConnector(connectionString, providerFactory);

            Assert.AreEqual(target.ConnectionString, connectionString);
            Assert.AreEqual(target.ProviderFactory, providerFactory);
		}

		/// <summary>
		/// A test for DbConnector (string, string)
		/// </summary>
		[TestMethod]
		public void ConstructorTest2_String_String()
		{
			string connectionString = "Data Source=dev;Initial Catalog=HavitTest;User Id=development;Password=development;";
			string providerInvariantName = "System.Data.SqlClient";

			DbConnector target = new DbConnector(connectionString, providerInvariantName);

			Assert.AreEqual(target.ConnectionString, connectionString);
            Assert.AreEqual(target.ProviderFactory.GetType(), typeof(SqlClientFactory));
		}
		#endregion

		#region Default
		/// <summary>
		/// A test for Default
		/// </summary>
		[TestMethod]
		public void DefaultTest_get_set_get_set()
		{
			DbConnector previousVal = DbConnector.Default;

			DbConnector val = new DbConnector(ConfigurationManager.ConnectionStrings["Test"]);
			Havit.Data.DbConnector.Default = val;

			Assert.AreEqual(val, Havit.Data.DbConnector.Default, "Havit.Data.DbConnector.Default was not set correctly.");

			DbConnector.Default = previousVal;

			Assert.AreEqual(previousVal, DbConnector.Default);
		}

		/// <summary>
		/// A test for Default
		/// </summary>
		[TestMethod]
		public void DefaultTest_get()
		{
			Assert.AreEqual(DbConnector.Default.ConnectionString, ConfigurationManager.ConnectionStrings["DefaultConnectionString"].ConnectionString);
			Assert.AreEqual(DbConnector.Default.ProviderFactory.GetType(), typeof(SqlClientFactory));
		}
		#endregion

		#region ExecuteScalar
		/// <summary>
		/// A test for ExecuteScalar (string)
		/// </summary>
		[TestMethod]
		public void ExecuteScalarTest()
		{
			string commandText = "SELECT Symbol FROM dbo.Role WHERE RoleID=-1";

			object expected = "ZaporneID";
			object actual;

			actual = DbConnector.Default.ExecuteScalar(commandText);

			Assert.AreEqual(expected, actual, "Havit.Data.DbConnector.ExecuteScalar did not return the expected value.");
		}
		#endregion	

		#region ExecuteDataSetTest
		[TestMethod]
		public void ExecuteDataSetTest()
		{
			string commandText = "SELECT * FROM dbo.Role";

			DataSet dataSet = DbConnector.Default.ExecuteDataSet(commandText);

			Assert.IsNotNull(dataSet);
			Assert.AreEqual(dataSet.Tables.Count, 1);
		}
		#endregion

		#region ExecuteDataTableTest
		[TestMethod]
		public void ExecuteDataTableTest()
		{
			string commandText = "SELECT Symbol FROM dbo.Role";

			DataTable dataTable = DbConnector.Default.ExecuteDataTable(commandText);

			Assert.IsNotNull(dataTable);
			Assert.AreEqual(dataTable.Columns.Count, 1);
		}
		#endregion

		#region ExecuteNonQueryTest
		[TestMethod]
		public void ExecuteNonQueryTest()
		{
			string commandText = "UPDATE dbo.Role SET Symbol='X' WHERE 0=1";

			int rowsAffected = DbConnector.Default.ExecuteNonQuery(commandText);
			Assert.AreEqual(rowsAffected, 0);
		}
		#endregion

		#region ExecuteReaderTest
		[TestMethod]
		public void ExecuteReaderTest()
		{
			string commandText = "SELECT Symbol FROM dbo.Role";

			DbDataReader reader = DbConnector.Default.ExecuteReader(commandText);
			while (reader.Read())
			{
				string symbol = (string)reader["Symbol"];
			}
		}
		#endregion

		#region ExecuteDataRecordTest
		[TestMethod]
		public void ExecuteDataRecordTest()
		{
			string commandText = "SELECT Symbol FROM dbo.Role WHERE RoleID=-1";

			DataRecord record = DbConnector.Default.ExecuteDataRecord(commandText);

			Assert.IsNotNull(record);
			string symbol = record.Get<string>("Symbol");
		}
		#endregion
	}
}
