// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Configuration;
using Havit.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
namespace Havit.DataTest
{
	/// <summary>
	/// This is a test class for Havit.Data.DbConnector and is intended
	/// to contain all Havit.Data.DbConnector Unit Tests
	/// </summary>
	[TestClass()]
	public class DbConnectorTest
	{
		#region Constructors
		/// <summary>
		/// A test for DbConnector (ConnectionStringSettings)
		/// </summary>
		[TestMethod]
		public void ConstructorTest_ConnectionStringSettings()
		{
			ConnectionStringSettings connectionStringSettings = ConfigurationManager.ConnectionStrings["Test"];
			DbConnector target = new DbConnector(connectionStringSettings);

            Assert.AreEqual(target.ConnectionString, connectionStringSettings.ConnectionString);
            Assert.AreEqual(target.ProviderFactory.GetType(), typeof(OleDbFactory));
		}

		/// <summary>
		/// A test for DbConnector (string, DbProviderFactory)
		/// </summary>
		[TestMethod]
		public void ConstructorTest_string_DbProviderFactory()
		{
			string connectionString = "Data Source=dev;Initial Catalog=HavitTest;User Id=development;Password=development;";
			DbProviderFactory providerFactory = DbProviderFactories.GetFactory("System.Data.SqlClient");

			DbConnector target = new DbConnector(connectionString, providerFactory);

            Assert.AreEqual(target.ConnectionString, connectionString);
            Assert.AreEqual(target.ProviderFactory, providerFactory);
		}

		/// <summary>
		/// A test for DbConnector (string, string)
		/// </summary>
		[TestMethod]
		public void ConstructorTest2_string_string()
		{
			string connectionString = "Data Source=dev;Initial Catalog=HavitTest;User Id=development;Password=development;";
			string providerInvariantName = "System.Data.SqlClient";

			DbConnector target = new DbConnector(connectionString, providerInvariantName);

			Assert.AreEqual(target.ConnectionString, connectionString);
            Assert.AreEqual(target.ProviderFactory.GetType(), typeof(SqlClientFactory));
		}
		#endregion

		#region Default
		/// <summary>
		/// A test for Default
		/// </summary>
		[TestMethod]
		public void DefaultTest_get_set_get_set()
		{
			DbConnector previousVal = DbConnector.Default;

			DbConnector val = new DbConnector(ConfigurationManager.ConnectionStrings["Test"]); // TODO: Assign to an appropriate value for the property
			Havit.Data.DbConnector.Default = val;

			Assert.AreEqual(val, Havit.Data.DbConnector.Default, "Havit.Data.DbConnector.Default was not set correctly.");

			DbConnector.Default = previousVal;

			Assert.AreEqual(previousVal, DbConnector.Default);
		}

		/// <summary>
		/// A test for Default
		/// </summary>
		[TestMethod]
		public void DefaultTest_get()
		{
			Assert.AreEqual(DbConnector.Default.ConnectionString, ConfigurationManager.ConnectionStrings["DefaultConnectionString"].ConnectionString);
			Assert.AreEqual(DbConnector.Default.ProviderFactory.GetType(), typeof(SqlClientFactory));
		}
		#endregion

		#region ExecuteScalar
		/// <summary>
		/// A test for ExecuteScalar (string)
		/// </summary>
		[TestMethod]
		public void ExecuteScalarTest()
		{
			string commandText = "SELECT Symbol FROM dbo.Role WHERE RoleID=-1";

			object expected = "ZaporneID";
			object actual;

			actual = DbConnector.Default.ExecuteScalar(commandText);

			Assert.AreEqual(expected, actual, "Havit.Data.DbConnector.ExecuteScalar did not return the expected value.");
		}
		#endregion

		#region TestContext
		private TestContext testContextInstance;

		/// <summary>
		/// Gets or sets the test context which provides
		/// information about and functionality for the current test run.
		/// </summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#endregion
	}
}
