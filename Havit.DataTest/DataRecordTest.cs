// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Data;
using Havit.Data;
namespace Havit.DataTest
{
	/// <summary>
	///This is a test class for Havit.Data.DataRecord and is intended
	///to contain all Havit.Data.DataRecord Unit Tests
	///</summary>
	[TestClass()]
	public class DataRecordTest
	{
		#region TestContext
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#endregion

		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion

		#region TryGet
		/// <summary>
		///A test for TryGet&lt;&gt; (string, out T)
		///</summary>
		[TestMethod()]
		public void TryGetTest_NacteniInt()
		{
			DataTable table = new DataTable();
			table.Columns.Add("ColumnName", typeof(int));
			table.Rows.Add(10);

			DataRecord record = new DataRecord(table.Rows[0]);

			string fieldName = "ColumnName";

			int TryGet_target;
			int target_expected = 10;

			bool expected = true;
			bool actual;

			actual = record.TryGet(fieldName, out TryGet_target);

			Assert.AreEqual(target_expected, TryGet_target, "target_TryGet_expected was not set correctly.");
			Assert.AreEqual(expected, actual, "Havit.Data.DataRecord.TryGet<T> did not return the expected value.");
		}

		/// <summary>
		///A test for TryGet&lt;&gt; (string, out T)
		///</summary>
		[TestMethod()]
		public void TryGetTest_PretypovaniIntNaNullableInt()
		{
			DataTable table = new DataTable();
			table.Columns.Add("ColumnName", typeof(int));
			table.Rows.Add(10);

			DataRecord record = new DataRecord(table.Rows[0]);

			string fieldName = "ColumnName";

			int? TryGet_target;
			int? target_expected = 10;

			bool expected = true;
			bool actual;

			actual = record.TryGet(fieldName, out TryGet_target);

			Assert.AreEqual(target_expected, TryGet_target, "target_TryGet_expected was not set correctly.");
			Assert.AreEqual(expected, actual, "Havit.Data.DataRecord.TryGet<T> did not return the expected value.");
		}

		/// <summary>
		///A test for TryGet&lt;&gt; (string, out T)
		///</summary>
		[TestMethod()]
		public void TryGetTest_PretypovaniDecimalNaDouble()
		{
			DataTable table = new DataTable();
			table.Columns.Add("ColumnName", typeof(decimal));
			table.Rows.Add(10.1M);

			DataRecord record = new DataRecord(table.Rows[0]);

			string fieldName = "ColumnName";

			double TryGet_target;
			double target_expected = 10.1;

			bool expected = true;
			bool actual;

			actual = record.TryGet(fieldName, out TryGet_target);

			Assert.AreEqual(target_expected, TryGet_target, "target_TryGet_expected was not set correctly.");
			Assert.AreEqual(expected, actual, "Havit.Data.DataRecord.TryGet<T> did not return the expected value.");
		}

		/// <summary>
		///A test for TryGet&lt;&gt; (string, out T)
		///</summary>
		[TestMethod()]
		[ExpectedException(typeof(InvalidCastException))]
		public void TryGetTest_InvalidCast()
		{
			DataTable table = new DataTable();
			table.Columns.Add("ColumnName", typeof(int));
			table.Rows.Add(10);

			DataRecord record = new DataRecord(table.Rows[0]);

			string fieldName = "ColumnName";

			Exception TryGet_target; // nekompatibilní typ

			bool actual;

			actual = record.TryGet(fieldName, out TryGet_target);
		}

		/// <summary>
		///A test for TryGet&lt;&gt; (string, out T)
		///</summary>
		[TestMethod()]
		[ExpectedException(typeof(ArgumentException))]
		public void TryGetTest_NenalezenoFullLoad()
		{
			DataTable table = new DataTable();
			table.Columns.Add("ColumnName", typeof(int));
			table.Rows.Add(10);

			DataRecord record = new DataRecord(table.Rows[0]);

			string fieldName = "ColumnName_Jiny";

			int? TryGet_target;

			bool actual;

			actual = record.TryGet(fieldName, out TryGet_target);
		}


		/// <summary>
		///A test for TryGet&lt;&gt; (string, out T)
		///</summary>
		[TestMethod()]
		public void TryGetTest_NenalezenoNotFullLoad()
		{
			DataTable table = new DataTable();
			table.Columns.Add("ColumnName", typeof(int));
			table.Rows.Add(10);

			DataRecord record = new DataRecord(table.Rows[0]);
			record.FullLoad = false;

			string fieldName = "ColumnName_Jiny";

			int? TryGet_target;
			int? target_expected = null;

			bool expected = false;
			bool actual;

			actual = record.TryGet(fieldName, out TryGet_target);

			Assert.AreEqual(target_expected, TryGet_target, "target_TryGet_expected was not set correctly.");
			Assert.AreEqual(expected, actual, "Havit.Data.DataRecord.TryGet<T> did not return the expected value.");
		}
		#endregion
	}


}
