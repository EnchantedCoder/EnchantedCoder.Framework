//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Threading;
using System.Web;
using System.Web.Caching;
using Havit.Data;
using Havit.Data.SqlClient;
using Havit.Data.SqlTypes;
using Havit.Business;
using Havit.Business.Query;

namespace Havit.BusinessLayerTest
{
	/// <summary>
	/// Kolekce business objektů typu Havit.BusinessLayerTest.Uzivatel.
	/// </summary>
	[Serializable]
	public partial class UzivatelCollectionBase : BusinessObjectCollection<Uzivatel>
	{
		//------------------------------------------------------------------------------
		// <auto-generated>
		//     This code was generated by a tool.
		//     Changes to this file will be lost if the code is regenerated.
		// </auto-generated>
		//------------------------------------------------------------------------------
		
		#region Find & FindAll
		/// <summary>
		/// Prohledá kolekci a vrátí první nalezený prvek odpovídající kritériu match.
		/// </summary>
		public override Uzivatel Find(Predicate<Uzivatel> match)
		{
			LoadAll();
			return base.Find(match);
		}
		
		/// <summary>
		/// Prohledá kolekci a vrátí všechny prvky odpovídající kritériu match.
		/// </summary>
		public override BusinessObjectCollection<Uzivatel> FindAll(Predicate<Uzivatel> match)
		{
			LoadAll();
			return base.FindAll(match);
		}
		#endregion
		
		#region LoadAll
		/// <summary>
		/// Načte všechny prvky kolekce.
		/// </summary>
		public void LoadAll()
		{
			LoadAll(null);
		}
		
		/// <summary>
		/// Načte všechny prvky kolekce.
		/// </summary>
		public void LoadAll(DbTransaction transaction)
		{
			if (this.Count == 0)
			{
				return;
			}
			
			List<int> ghosts = new List<int>();
			
			for (int i = 0; i < this.Count; i++)
			{
				Uzivatel currentObject = this[i];
				if (!currentObject.IsLoaded)
				{
					if (!ghosts.Contains(currentObject.ID))
					{
						ghosts.Add(currentObject.ID);
					}
				}
			}
			
			if (ghosts.Count == 0)
			{
				return;
			}
			
			SqlCommand sqlCommand = new SqlCommand();
			sqlCommand.Transaction = (SqlTransaction)transaction;
			
			QueryParams queryParams = new QueryParams();
			queryParams.ObjectInfo = Uzivatel.ObjectInfo;
			queryParams.Conditions.Add(ReferenceCondition.CreateIn(Uzivatel.Properties.ID, ghosts.ToArray()));
			queryParams.PrepareCommand(sqlCommand);
			
			using (SqlDataReader reader = SqlDataAccess.ExecuteReader(sqlCommand))
			{
				while (reader.Read())
				{
					DataRecord dataRecord = new DataRecord(reader, queryParams.GetDataLoadPower());
					int id = dataRecord.Get<int>(Uzivatel.Properties.ID.FieldName);
					
					foreach (Uzivatel ghost in this)
					{
						if (!ghost.IsLoaded && (ghost.ID == id))
						{
							ghost.Load(dataRecord);
						}
					}
				}
			}
		}
		#endregion
		
	}
}
