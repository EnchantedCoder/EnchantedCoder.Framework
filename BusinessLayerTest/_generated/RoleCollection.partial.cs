using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Web;
using System.Web.Caching;
using Havit.Data;
using Havit.Data.SqlClient;
using Havit.Data.SqlTypes;
using Havit.Business;
using Havit.Business.Query;

namespace Havit.BusinessLayerTest
{
	/// <summary>
	/// Kolekce business objektů typu Havit.BusinessLayerTest.Role.
	/// </summary>
	[Serializable]
	public partial class RoleCollection : BusinessObjectCollection<Role>
	{
		//------------------------------------------------------------------------------
		// <auto-generated>
		//     This code was generated by a tool.
		//     Changes to this file will be lost if the code is regenerated.
		// </auto-generated>
		//------------------------------------------------------------------------------
		
		#region Find & FindAll
		public override Role Find(Predicate<Role> match)
		{
			LoadAll();
			return base.Find(match);
		}
		
		public override BusinessObjectCollection<Role> FindAll(Predicate<Role> match)
		{
			LoadAll();
			return base.FindAll(match);
		}
		#endregion
		
		#region LoadAll
		/// <summary>
		/// Načte všechny prvky kolekce.
		/// </summary>
		public void LoadAll()
		{
			LoadAll(null);
		}
		
		/// <summary>
		/// Načte všechny prvky kolekce.
		/// </summary>
		public void LoadAll(DbTransaction transaction)
		{
			if (this.Count == 0)
			{
				return;
			}
			
			List<int> ghosts = new List<int>();
			
			for (int i = 0; i < this.Count; i++)
			{
				Role currentObject = this[i];
				if (!currentObject.IsLoaded)
				{
					if (!ghosts.Contains(currentObject.ID))
					{
						ghosts.Add(currentObject.ID);
					}
				}
			}
			
			if (ghosts.Count == 0)
			{
				return;
			}
			
			SqlCommand sqlCommand = new SqlCommand();
			sqlCommand.Transaction = (SqlTransaction)transaction;
			
			QueryParams queryParams = new QueryParams();
			queryParams.ObjectInfo = Role.ObjectInfo;
			queryParams.Conditions.Add(ReferenceCondition.CreateIn(Role.Properties.ID, ghosts.ToArray()));
			queryParams.PrepareCommand(sqlCommand);
			
			SqlDataReader reader = SqlDataAccess.ExecuteReader(sqlCommand);
			
			while (reader.Read())
			{
				DataRecord dataRecord = new DataRecord(reader);
				int id = dataRecord.Get<int>(Role.Properties.ID.FieldName);
				
				foreach (Role ghost in this)
				{
					if (!ghost.IsLoaded && ghost.ID == id)
					{
						ghost.Load(dataRecord);
					}
				}
			}
		}
		#endregion
		
	}
}
