//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Threading;
using System.Web;
using System.Web.Caching;
using Havit.Collections;
using Havit.Data;
using Havit.Data.SqlClient;
using Havit.Data.SqlTypes;
using Havit.Business;
using Havit.Business.Query;

namespace Havit.BusinessLayerTest
{
	/// <summary>
	/// Objektová reprezentace metadat vlastností typu Uzivatel.
	/// </summary>
	public class UzivatelPropertiesBase
	{
		/// <summary>
		/// Konstruktor.
		/// </summary>
		public UzivatelPropertiesBase()
		{
			_id = new FieldPropertyInfo();
			_username = new FieldPropertyInfo();
			_password = new FieldPropertyInfo();
			_displayAs = new FieldPropertyInfo();
			_email = new FieldPropertyInfo();
			_disabled = new FieldPropertyInfo();
			_lockedTime = new FieldPropertyInfo();
			_loginLast = new FieldPropertyInfo();
			_loginCount = new FieldPropertyInfo();
			_created = new FieldPropertyInfo();
			_deleted = new FieldPropertyInfo();
			_role = new CollectionPropertyInfo();
			_all = new PropertyInfoCollection(_id, _username, _password, _displayAs, _email, _disabled, _lockedTime, _loginLast, _loginCount, _created, _deleted, _role);
		}
		
		/// <summary>
		/// Inicializuje hodnoty metadat.
		/// </summary>
		public void Initialize(ObjectInfo objectInfo)
		{
			_id.Initialize(objectInfo, "ID", "UzivatelID", true, SqlDbType.Int, false, 4);
			_username.Initialize(objectInfo, "Username", "Username", false, SqlDbType.VarChar, false, 50);
			_password.Initialize(objectInfo, "Password", "Password", false, SqlDbType.NVarChar, false, 30);
			_displayAs.Initialize(objectInfo, "DisplayAs", "DisplayAs", false, SqlDbType.NVarChar, false, 50);
			_email.Initialize(objectInfo, "Email", "Email", false, SqlDbType.NVarChar, false, 100);
			_disabled.Initialize(objectInfo, "Disabled", "Disabled", false, SqlDbType.Bit, false, 1);
			_lockedTime.Initialize(objectInfo, "LockedTime", "LockedTime", false, SqlDbType.SmallDateTime, true, 4);
			_loginLast.Initialize(objectInfo, "LoginLast", "LoginLast", false, SqlDbType.SmallDateTime, true, 4);
			_loginCount.Initialize(objectInfo, "LoginCount", "LoginCount", false, SqlDbType.Int, false, 4);
			_created.Initialize(objectInfo, "Created", "Created", false, SqlDbType.SmallDateTime, false, 4);
			_deleted.Initialize(objectInfo, "Deleted", "Deleted", false, SqlDbType.Bit, false, 1);
			_role.Initialize(objectInfo, "Role", typeof(Havit.BusinessLayerTest.Role), "(SELECT dbo.IntArrayAggregate(_items.RoleID) FROM dbo.Uzivatel_Role AS _items WHERE (_items.UzivatelID = dbo.Uzivatel.UzivatelID)) AS Role");
		}
		
		/// <summary>
		/// Identifikátor objektu.
		/// </summary>
		public FieldPropertyInfo ID
		{
			get
			{
				return _id;
			}
		}
		private FieldPropertyInfo _id;
		
		/// <summary>
		/// Uživatelské jméno, kterým se uživatel přihlašuje.
		/// </summary>
		public FieldPropertyInfo Username
		{
			get
			{
				return _username;
			}
		}
		private FieldPropertyInfo _username;
		
		/// <summary>
		/// Heslo uživatele.
		/// </summary>
		public FieldPropertyInfo Password
		{
			get
			{
				return _password;
			}
		}
		private FieldPropertyInfo _password;
		
		/// <summary>
		/// Jméno uživatele, jak se má zobrazovat pro přihlášení.
		/// </summary>
		public FieldPropertyInfo DisplayAs
		{
			get
			{
				return _displayAs;
			}
		}
		private FieldPropertyInfo _displayAs;
		
		/// <summary>
		/// Email uživatele.
		/// </summary>
		public FieldPropertyInfo Email
		{
			get
			{
				return _email;
			}
		}
		private FieldPropertyInfo _email;
		
		/// <summary>
		/// Indikuje, zda-li je uživatelský účet zablokován (nelze se přihlásit).
		/// </summary>
		public FieldPropertyInfo Disabled
		{
			get
			{
				return _disabled;
			}
		}
		private FieldPropertyInfo _disabled;
		
		/// <summary>
		/// Okamžik, kdy byl uživatelský účet uzamčen pro opakovaně neúspěšné pokusy o přihlášení.
		/// Indikuje uzamčený uživatelského účtu (NOT NULL).
		/// </summary>
		public FieldPropertyInfo LockedTime
		{
			get
			{
				return _lockedTime;
			}
		}
		private FieldPropertyInfo _lockedTime;
		
		/// <summary>
		/// Okamžik posledního úspěšného přihlášení uživatele.
		/// </summary>
		public FieldPropertyInfo LoginLast
		{
			get
			{
				return _loginLast;
			}
		}
		private FieldPropertyInfo _loginLast;
		
		/// <summary>
		/// Počet úspěšných přihlášení uživatele od jeho založení.
		/// </summary>
		public FieldPropertyInfo LoginCount
		{
			get
			{
				return _loginCount;
			}
		}
		private FieldPropertyInfo _loginCount;
		
		/// <summary>
		/// Okamžik založení objektu v DB.
		/// </summary>
		public FieldPropertyInfo Created
		{
			get
			{
				return _created;
			}
		}
		private FieldPropertyInfo _created;
		
		/// <summary>
		/// Indikuje smazaného uživatele.
		/// </summary>
		public FieldPropertyInfo Deleted
		{
			get
			{
				return _deleted;
			}
		}
		private FieldPropertyInfo _deleted;
		
		public CollectionPropertyInfo Role
		{
			get
			{
				return _role;
			}
		}
		private CollectionPropertyInfo _role;
		
		/// <summary>
		/// Všechny sloupečky typu Uzivatel.
		/// </summary>
		public PropertyInfoCollection All
		{
			get
			{
				return _all;
			}
		}
		private PropertyInfoCollection _all;
		
	}
}
