//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.Caching;
using System.Xml;
using Havit.Business;
using Havit.Business.Query;
using Havit.Collections;
using Havit.Data;
using Havit.Data.SqlServer;
using Havit.Data.SqlTypes;

namespace Havit.BusinessLayerTest
{
	/// <summary>
	/// Uživatel.
	/// </summary>
	/// <remarks>
	/// <code>
	/// CREATE TABLE [dbo].[Uzivatel](
	/// 	[UzivatelID] [int] IDENTITY(1,1) NOT NULL,
	/// 	[Username] [varchar](50) COLLATE Czech_CI_AS NOT NULL,
	/// 	[Password] [nvarchar](30) COLLATE Czech_CI_AS NOT NULL,
	/// 	[DisplayAs] [nvarchar](50) COLLATE Czech_CI_AS NOT NULL,
	/// 	[Email] [nvarchar](100) COLLATE Czech_CI_AS NOT NULL,
	/// 	[Disabled] [bit] NOT NULL,
	/// 	[LockedTime] [smalldatetime] NULL,
	/// 	[LoginLast] [smalldatetime] NULL,
	/// 	[LoginCount] [int] NOT NULL,
	/// 	[Created] [smalldatetime] NOT NULL,
	///  CONSTRAINT [PK_Uzivatel] PRIMARY KEY CLUSTERED 
	/// (
	/// 	[UzivatelID] ASC
	/// )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
	///  CONSTRAINT [IX_Uzivatel_Username] UNIQUE NONCLUSTERED 
	/// (
	/// 	[Username] ASC
	/// )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	/// ) ON [PRIMARY]
	/// ALTER TABLE [dbo].[Uzivatel] ADD  CONSTRAINT [DF_Uzivatel_Username]  DEFAULT (N'') FOR [Username]
	/// ALTER TABLE [dbo].[Uzivatel] ADD  CONSTRAINT [DF_Uzivatel_Password]  DEFAULT (N'DefaultS&quot;UvozovkouA''Apostrofem') FOR [Password]
	/// ALTER TABLE [dbo].[Uzivatel] ADD  CONSTRAINT [DF_Uzivatel_DisplayAs]  DEFAULT (N'') FOR [DisplayAs]
	/// ALTER TABLE [dbo].[Uzivatel] ADD  CONSTRAINT [DF_Uzivatel_Email]  DEFAULT (N'') FOR [Email]
	/// ALTER TABLE [dbo].[Uzivatel] ADD  CONSTRAINT [DF_Uzivatel_Disabled]  DEFAULT ((0)) FOR [Disabled]
	/// ALTER TABLE [dbo].[Uzivatel] ADD  CONSTRAINT [DF_Uzivatel_LoginCount]  DEFAULT ((0)) FOR [LoginCount]
	/// ALTER TABLE [dbo].[Uzivatel] ADD  CONSTRAINT [DF_Uzivatel_Created]  DEFAULT (getdate()) FOR [Created]
	/// </code>
	/// </remarks>
	[System.CodeDom.Compiler.GeneratedCode("Havit.BusinessLayerGenerator", "1.0")]
	public abstract class UzivatelBase : ActiveRecordBusinessObjectBase
	{
		#region Static constructor
		static UzivatelBase()
		{
			objectInfo = new ObjectInfo();
			properties = new UzivatelProperties();
			objectInfo.Initialize("dbo", "Uzivatel", "Uzivatel", "Havit.BusinessLayerTest", false, Uzivatel.CreateObject, Uzivatel.GetObject, Uzivatel.GetAll, null, properties.All);
			properties.Initialize(objectInfo);
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// Vytvoří instanci objektu jako nový prvek.
		/// </summary>
		/// <param name="connectionMode">Režim business objektu.</param>
		[System.CodeDom.Compiler.GeneratedCode("Havit.BusinessLayerGenerator", "1.0")]
		protected UzivatelBase(ConnectionMode connectionMode) : base(connectionMode)
		{
		}
		
		/// <summary>
		/// Vytvoří instanci existujícího objektu.
		/// </summary>
		/// <param name="id">UzivatelID (PK).</param>
		/// <param name="connectionMode">Režim business objektu.</param>
		protected UzivatelBase(int id, ConnectionMode connectionMode) : base(id, connectionMode)
		{
		}
		
		/// <summary>
		/// Vytvoří instanci objektu na základě dat (i částečných) načtených z databáze.
		/// </summary>
		/// <param name="id">UzivatelID (PK).</param>
		/// <param name="record">DataRecord s daty objektu (i částečnými).</param>
		protected UzivatelBase(int id, DataRecord record) : base(id, record)
		{
		}
		#endregion
		
		#region Properties dle sloupců databázové tabulky
		/// <summary>
		/// Uživatelské jméno, kterým se uživatel přihlašuje. [varchar(50), not-null, default N'']
		/// </summary>
		public virtual string Username
		{
			get
			{
				EnsureLoaded();
				return _UsernamePropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				string newValue = value ?? String.Empty;
				if (!Object.Equals(_UsernamePropertyHolder.Value, newValue))
				{
					string oldValue = _UsernamePropertyHolder.Value;
					_UsernamePropertyHolder.Value = newValue;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Username), oldValue, newValue));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost Username.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<string> _UsernamePropertyHolder;
		
		/// <summary>
		/// Heslo uživatele. [nvarchar(30), not-null, default N'DefaultS&quot;UvozovkouA''Apostrofem']
		/// </summary>
		public virtual string Password
		{
			get
			{
				EnsureLoaded();
				return _PasswordPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				string newValue = value ?? String.Empty;
				if (!Object.Equals(_PasswordPropertyHolder.Value, newValue))
				{
					string oldValue = _PasswordPropertyHolder.Value;
					_PasswordPropertyHolder.Value = newValue;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Password), oldValue, newValue));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost Password.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<string> _PasswordPropertyHolder;
		
		/// <summary>
		/// Jméno uživatele, jak se má zobrazovat pro přihlášení. [nvarchar(50), not-null, default N'']
		/// </summary>
		public virtual string DisplayAs
		{
			get
			{
				EnsureLoaded();
				return _DisplayAsPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				string newValue = value ?? String.Empty;
				if (!Object.Equals(_DisplayAsPropertyHolder.Value, newValue))
				{
					string oldValue = _DisplayAsPropertyHolder.Value;
					_DisplayAsPropertyHolder.Value = newValue;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(DisplayAs), oldValue, newValue));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost DisplayAs.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<string> _DisplayAsPropertyHolder;
		
		/// <summary>
		/// Email uživatele. [nvarchar(100), not-null, default N'']
		/// </summary>
		public virtual string Email
		{
			get
			{
				EnsureLoaded();
				return _EmailPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				string newValue = value ?? String.Empty;
				if (!Object.Equals(_EmailPropertyHolder.Value, newValue))
				{
					string oldValue = _EmailPropertyHolder.Value;
					_EmailPropertyHolder.Value = newValue;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Email), oldValue, newValue));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost Email.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<string> _EmailPropertyHolder;
		
		/// <summary>
		/// Indikuje, zda-li je uživatelský účet zablokován (nelze se přihlásit). [bit, not-null, default 0]
		/// </summary>
		public virtual bool Disabled
		{
			get
			{
				EnsureLoaded();
				return _DisabledPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				if (!Object.Equals(_DisabledPropertyHolder.Value, value))
				{
					bool oldValue = _DisabledPropertyHolder.Value;
					_DisabledPropertyHolder.Value = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Disabled), oldValue, value));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost Disabled.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<bool> _DisabledPropertyHolder;
		
		/// <summary>
		/// Okamžik, kdy byl uživatelský účet uzamčen pro opakovaně neúspěšné pokusy o přihlášení.
		/// Indikuje uzamčený uživatelského účtu (NOT NULL). [smalldatetime, nullable]
		/// </summary>
		public virtual DateTime? LockedTime
		{
			get
			{
				EnsureLoaded();
				return _LockedTimePropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				if (!Object.Equals(_LockedTimePropertyHolder.Value, value))
				{
					DateTime? oldValue = _LockedTimePropertyHolder.Value;
					_LockedTimePropertyHolder.Value = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(LockedTime), oldValue, value));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost LockedTime.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<DateTime?> _LockedTimePropertyHolder;
		
		/// <summary>
		/// Okamžik posledního úspěšného přihlášení uživatele. [smalldatetime, nullable]
		/// </summary>
		public virtual DateTime? LoginLast
		{
			get
			{
				EnsureLoaded();
				return _LoginLastPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				if (!Object.Equals(_LoginLastPropertyHolder.Value, value))
				{
					DateTime? oldValue = _LoginLastPropertyHolder.Value;
					_LoginLastPropertyHolder.Value = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(LoginLast), oldValue, value));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost LoginLast.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<DateTime?> _LoginLastPropertyHolder;
		
		/// <summary>
		/// Počet úspěšných přihlášení uživatele od jeho založení. [int, not-null, default 0]
		/// </summary>
		public virtual int LoginCount
		{
			get
			{
				EnsureLoaded();
				return _LoginCountPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				
				if (!Object.Equals(_LoginCountPropertyHolder.Value, value))
				{
					int oldValue = _LoginCountPropertyHolder.Value;
					_LoginCountPropertyHolder.Value = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(LoginCount), oldValue, value));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost LoginCount.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<int> _LoginCountPropertyHolder;
		
		/// <summary>
		/// Okamžik založení objektu v DB. [smalldatetime, not-null, read-only, default getdate()]
		/// </summary>
		public virtual DateTime Created
		{
			get
			{
				EnsureLoaded();
				return _CreatedPropertyHolder.Value;
			}
			private set
			{
				EnsureLoaded();
				
				if (!Object.Equals(_CreatedPropertyHolder.Value, value))
				{
					DateTime oldValue = _CreatedPropertyHolder.Value;
					_CreatedPropertyHolder.Value = value;
					OnPropertyChanged(new PropertyChangedEventArgs(nameof(Created), oldValue, value));
				}
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost Created.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<DateTime> _CreatedPropertyHolder;
		
		/// <summary>
		/// Role uživatele.
		/// </summary>
		public virtual Havit.BusinessLayerTest.RoleCollection Role
		{
			get
			{
				EnsureLoaded();
				return _RolePropertyHolder.Value;
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost Role.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected CollectionPropertyHolder<Havit.BusinessLayerTest.RoleCollection, Havit.BusinessLayerTest.Role> _RolePropertyHolder;
		
		#endregion
		
		#region Init
		/// <summary>
		/// Inicializuje třídu (vytvoří instance PropertyHolderů).
		/// </summary>
		protected override void Init()
		{
			_UsernamePropertyHolder = new PropertyHolder<string>(this);
			_PasswordPropertyHolder = new PropertyHolder<string>(this);
			_DisplayAsPropertyHolder = new PropertyHolder<string>(this);
			_EmailPropertyHolder = new PropertyHolder<string>(this);
			_DisabledPropertyHolder = new PropertyHolder<bool>(this);
			_LockedTimePropertyHolder = new PropertyHolder<DateTime?>(this);
			_LoginLastPropertyHolder = new PropertyHolder<DateTime?>(this);
			_LoginCountPropertyHolder = new PropertyHolder<int>(this);
			_CreatedPropertyHolder = new PropertyHolder<DateTime>(this);
			_RolePropertyHolder = new CollectionPropertyHolder<Havit.BusinessLayerTest.RoleCollection, Havit.BusinessLayerTest.Role>(this);
			
			if (IsNew || IsDisconnected)
			{
				_UsernamePropertyHolder.Value = String.Empty;
				_PasswordPropertyHolder.Value = "DefaultS\"UvozovkouA'Apostrofem";
				_DisplayAsPropertyHolder.Value = String.Empty;
				_EmailPropertyHolder.Value = String.Empty;
				_DisabledPropertyHolder.Value = false;
				_LockedTimePropertyHolder.Value = null;
				_LoginLastPropertyHolder.Value = null;
				_LoginCountPropertyHolder.Value = 0;
				_CreatedPropertyHolder.Value = System.DateTime.Now;
				_RolePropertyHolder.Initialize();
			}
			
			base.Init();
		}
		#endregion
		
		#region CleanDirty
		/// <summary>
		/// Nastaví property holderům IsDirty na false.
		/// </summary>
		protected override void CleanDirty()
		{
			base.CleanDirty();
			
			_UsernamePropertyHolder.IsDirty = false;
			_PasswordPropertyHolder.IsDirty = false;
			_DisplayAsPropertyHolder.IsDirty = false;
			_EmailPropertyHolder.IsDirty = false;
			_DisabledPropertyHolder.IsDirty = false;
			_LockedTimePropertyHolder.IsDirty = false;
			_LoginLastPropertyHolder.IsDirty = false;
			_LoginCountPropertyHolder.IsDirty = false;
			_CreatedPropertyHolder.IsDirty = false;
			_RolePropertyHolder.IsDirty = false;
		}
		#endregion
		
		#region CheckConstraints
		/// <summary>
		/// Kontroluje konzistenci objektu jako celku.
		/// </summary>
		/// <remarks>
		/// Automaticky je voláno před ukládáním objektu Save(), pokud je objekt opravdu ukládán.
		/// </remarks>
		protected override void CheckConstraints()
		{
			base.CheckConstraints();
			
			if (_UsernamePropertyHolder.IsDirty && (_UsernamePropertyHolder.Value != null) && (_UsernamePropertyHolder.Value.Length > 50))
			{
				throw new ConstraintViolationException(this, "Vlastnost \"Username\" - řetězec přesáhl maximální délku 50 znaků.");
			}
			
			if (_PasswordPropertyHolder.IsDirty && (_PasswordPropertyHolder.Value != null) && (_PasswordPropertyHolder.Value.Length > 30))
			{
				throw new ConstraintViolationException(this, "Vlastnost \"Password\" - řetězec přesáhl maximální délku 30 znaků.");
			}
			
			if (_DisplayAsPropertyHolder.IsDirty && (_DisplayAsPropertyHolder.Value != null) && (_DisplayAsPropertyHolder.Value.Length > 50))
			{
				throw new ConstraintViolationException(this, "Vlastnost \"DisplayAs\" - řetězec přesáhl maximální délku 50 znaků.");
			}
			
			if (_EmailPropertyHolder.IsDirty && (_EmailPropertyHolder.Value != null) && (_EmailPropertyHolder.Value.Length > 100))
			{
				throw new ConstraintViolationException(this, "Vlastnost \"Email\" - řetězec přesáhl maximální délku 100 znaků.");
			}
			
			if (_LockedTimePropertyHolder.IsDirty)
			{
				if (_LockedTimePropertyHolder.Value != null)
				{
					if ((_LockedTimePropertyHolder.Value.Value < Havit.Data.SqlTypes.SqlSmallDateTime.MinValue.Value) || (_LockedTimePropertyHolder.Value.Value > Havit.Data.SqlTypes.SqlSmallDateTime.MaxValue.Value))
					{
						throw new ConstraintViolationException(this, "Vlastnost \"LockedTime\" nesmí nabývat hodnoty mimo rozsah SqlSmallDateTime.MinValue-SqlSmallDateTime.MaxValue.");
					}
				}
			}
			
			if (_LoginLastPropertyHolder.IsDirty)
			{
				if (_LoginLastPropertyHolder.Value != null)
				{
					if ((_LoginLastPropertyHolder.Value.Value < Havit.Data.SqlTypes.SqlSmallDateTime.MinValue.Value) || (_LoginLastPropertyHolder.Value.Value > Havit.Data.SqlTypes.SqlSmallDateTime.MaxValue.Value))
					{
						throw new ConstraintViolationException(this, "Vlastnost \"LoginLast\" nesmí nabývat hodnoty mimo rozsah SqlSmallDateTime.MinValue-SqlSmallDateTime.MaxValue.");
					}
				}
			}
			
			if (_CreatedPropertyHolder.IsDirty)
			{
				if ((_CreatedPropertyHolder.Value < Havit.Data.SqlTypes.SqlSmallDateTime.MinValue.Value) || (_CreatedPropertyHolder.Value > Havit.Data.SqlTypes.SqlSmallDateTime.MaxValue.Value))
				{
					throw new ConstraintViolationException(this, "PropertyHolder \"_CreatedPropertyHolder\" nesmí nabývat hodnoty mimo rozsah SqlSmallDateTime.MinValue-SqlSmallDateTime.MaxValue.");
				}
			}
			
		}
		#endregion
		
		#region Load: Load_GetDataRecord, Load_ParseDataRecord
		/// <summary>
		/// Načte data objektu z DB a vrátí je ve formě DataRecordu.
		/// </summary>
		/// <param name="transaction">Transakce.</param>
		/// <returns>Úplná data objektu.</returns>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed DataRecord Load_GetDataRecord(DbTransaction transaction)
		{
			DataRecord result;
			
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.CommandText = "SELECT [UzivatelID], [Username], [Password], [DisplayAs], [Email], [Disabled], [LockedTime], [LoginLast], [LoginCount], [Created], (SELECT CAST([_items].[RoleID] AS NVARCHAR(11)) + '|' FROM [dbo].[Uzivatel_Role] AS [_items] WHERE ([_items].[UzivatelID] = @UzivatelID) FOR XML PATH('')) AS [Role] FROM [dbo].[Uzivatel] WHERE [UzivatelID] = @UzivatelID";
			dbCommand.Transaction = transaction;
			
			DbParameter dbParameterUzivatelID = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterUzivatelID.DbType = DbType.Int32;
			dbParameterUzivatelID.Direction = ParameterDirection.Input;
			dbParameterUzivatelID.ParameterName = "UzivatelID";
			dbParameterUzivatelID.Value = this.ID;
			dbCommand.Parameters.Add(dbParameterUzivatelID);
			
			result = DbConnector.Default.ExecuteDataRecord(dbCommand);
			
			return result;
		}
		
		/// <summary>
		/// Vytahá data objektu z DataRecordu.
		/// </summary>
		/// <param name="record">DataRecord s daty objektu</param>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Load_ParseDataRecord(DataRecord record)
		{
			this.ID = record.Get<int>("UzivatelID");
			
			string _tempUsername;
			if (record.TryGet<string>("Username", out _tempUsername))
			{
				_UsernamePropertyHolder.Value = _tempUsername ?? String.Empty;
			}
			
			string _tempPassword;
			if (record.TryGet<string>("Password", out _tempPassword))
			{
				_PasswordPropertyHolder.Value = _tempPassword ?? String.Empty;
			}
			
			string _tempDisplayAs;
			if (record.TryGet<string>("DisplayAs", out _tempDisplayAs))
			{
				_DisplayAsPropertyHolder.Value = _tempDisplayAs ?? String.Empty;
			}
			
			string _tempEmail;
			if (record.TryGet<string>("Email", out _tempEmail))
			{
				_EmailPropertyHolder.Value = _tempEmail ?? String.Empty;
			}
			
			bool _tempDisabled;
			if (record.TryGet<bool>("Disabled", out _tempDisabled))
			{
				_DisabledPropertyHolder.Value = _tempDisabled;
			}
			
			DateTime? _tempLockedTime;
			if (record.TryGet<DateTime?>("LockedTime", out _tempLockedTime))
			{
				_LockedTimePropertyHolder.Value = _tempLockedTime;
			}
			
			DateTime? _tempLoginLast;
			if (record.TryGet<DateTime?>("LoginLast", out _tempLoginLast))
			{
				_LoginLastPropertyHolder.Value = _tempLoginLast;
			}
			
			int _tempLoginCount;
			if (record.TryGet<int>("LoginCount", out _tempLoginCount))
			{
				_LoginCountPropertyHolder.Value = _tempLoginCount;
			}
			
			DateTime _tempCreated;
			if (record.TryGet<DateTime>("Created", out _tempCreated))
			{
				_CreatedPropertyHolder.Value = _tempCreated;
			}
			
			string _tempRole;
			if (record.TryGet<string>("Role", out _tempRole))
			{
				_RolePropertyHolder.Initialize();
				_RolePropertyHolder.Value.Clear();
				if (_tempRole != null)
				{
					_RolePropertyHolder.Value.AllowDuplicates = true; // Z výkonových důvodů. Víme, že duplicity nepřidáme.
					
					if (_tempRole.Length > 25)
					{
						Span<byte> _tempRoleSpan = Encoding.UTF8.GetBytes(_tempRole);
						while (_tempRoleSpan.Length > 0)
						{
							System.Buffers.Text.Utf8Parser.TryParse(_tempRoleSpan, out int  _roleID, out int _roleBytesConsumed);
							_RolePropertyHolder.Value.Add(Havit.BusinessLayerTest.Role.GetObject(_roleID));
							
							_tempRoleSpan = _tempRoleSpan.Slice(_roleBytesConsumed + 1); // za každou (i za poslední) položkou je oddělovač
						}
					}
					else
					{
						string[] _tempRoleItems = _tempRole.Split('|');
						int _tempRoleItemsLength = _tempRoleItems.Length - 1; // za každou (i za poslední) položkou je oddělovač
						for (int i = 0; i < _tempRoleItemsLength; i++)
						{
							_RolePropertyHolder.Value.Add(Havit.BusinessLayerTest.Role.GetObject(BusinessObjectBase.FastIntParse(_tempRoleItems[i])));
						}
					}
					
					_RolePropertyHolder.Value.AllowDuplicates = false;
				}
			}
			
		}
		#endregion
		
		#region Save & Delete: Save_SaveMembers, Save_SaveCollections, Save_MinimalInsert, Save_FullInsert, Save_Update, Save_Insert_InsertRequiredForMinimalInsert, Save_Insert_InsertRequiredForFullInsert, Delete, Delete_Perform
		
		/// <summary>
		/// Ukládá member-objekty.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_SaveMembers(DbTransaction transaction)
		{
			base.Save_SaveMembers(transaction);
			
			// Není co ukládat.
		}
		
		/// <summary>
		/// Ukládá member-kolekce objektu.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_SaveCollections(DbTransaction transaction)
		{
			base.Save_SaveCollections(transaction);
			
			if (_RolePropertyHolder.IsInitialized)
			{
				_RolePropertyHolder.Value.SaveAll(transaction);
			}
			
		}
		
		/// <summary>
		/// Implementace metody vloží jen not-null vlastnosti objektu do databáze a nastaví nově přidělené ID (primární klíč).
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		public override sealed void Save_MinimalInsert(DbTransaction transaction)
		{
			base.Save_MinimalInsert(transaction);
			Save_Insert_InsertRequiredForMinimalInsert(transaction);
			
			DbCommand dbCommand;
			dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			DbParameter dbParameterUsername = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterUsername.DbType = DbType.AnsiString;
			dbParameterUsername.Size = 50;
			dbParameterUsername.Direction = ParameterDirection.Input;
			dbParameterUsername.ParameterName = "Username";
			dbParameterUsername.Value = _UsernamePropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterUsername);
			_UsernamePropertyHolder.IsDirty = false;
			
			DbParameter dbParameterPassword = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterPassword.DbType = DbType.String;
			dbParameterPassword.Size = 30;
			dbParameterPassword.Direction = ParameterDirection.Input;
			dbParameterPassword.ParameterName = "Password";
			dbParameterPassword.Value = _PasswordPropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterPassword);
			_PasswordPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterDisplayAs = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterDisplayAs.DbType = DbType.String;
			dbParameterDisplayAs.Size = 50;
			dbParameterDisplayAs.Direction = ParameterDirection.Input;
			dbParameterDisplayAs.ParameterName = "DisplayAs";
			dbParameterDisplayAs.Value = _DisplayAsPropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterDisplayAs);
			_DisplayAsPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterEmail = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterEmail.DbType = DbType.String;
			dbParameterEmail.Size = 100;
			dbParameterEmail.Direction = ParameterDirection.Input;
			dbParameterEmail.ParameterName = "Email";
			dbParameterEmail.Value = _EmailPropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterEmail);
			_EmailPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterDisabled = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterDisabled.DbType = DbType.Boolean;
			dbParameterDisabled.Direction = ParameterDirection.Input;
			dbParameterDisabled.ParameterName = "Disabled";
			dbParameterDisabled.Value = _DisabledPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterDisabled);
			_DisabledPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterLockedTime = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterLockedTime.DbType = DbType.DateTime;
			dbParameterLockedTime.Direction = ParameterDirection.Input;
			dbParameterLockedTime.ParameterName = "LockedTime";
			dbParameterLockedTime.Value = (_LockedTimePropertyHolder.Value == null) ? DBNull.Value : (object)_LockedTimePropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterLockedTime);
			_LockedTimePropertyHolder.IsDirty = false;
			
			DbParameter dbParameterLoginLast = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterLoginLast.DbType = DbType.DateTime;
			dbParameterLoginLast.Direction = ParameterDirection.Input;
			dbParameterLoginLast.ParameterName = "LoginLast";
			dbParameterLoginLast.Value = (_LoginLastPropertyHolder.Value == null) ? DBNull.Value : (object)_LoginLastPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterLoginLast);
			_LoginLastPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterLoginCount = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterLoginCount.DbType = DbType.Int32;
			dbParameterLoginCount.Direction = ParameterDirection.Input;
			dbParameterLoginCount.ParameterName = "LoginCount";
			dbParameterLoginCount.Value = _LoginCountPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterLoginCount);
			_LoginCountPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterCreated = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterCreated.DbType = DbType.DateTime;
			dbParameterCreated.Direction = ParameterDirection.Input;
			dbParameterCreated.ParameterName = "Created";
			dbParameterCreated.Value = _CreatedPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterCreated);
			_CreatedPropertyHolder.IsDirty = false;
			
			dbCommand.CommandText = "DECLARE @UzivatelID INT; INSERT INTO [dbo].[Uzivatel] ([Username], [Password], [DisplayAs], [Email], [Disabled], [LockedTime], [LoginLast], [LoginCount], [Created]) VALUES (@Username, @Password, @DisplayAs, @Email, @Disabled, @LockedTime, @LoginLast, @LoginCount, @Created); SELECT @UzivatelID = SCOPE_IDENTITY(); SELECT @UzivatelID; ";
			this.ID = (int)DbConnector.Default.ExecuteScalar(dbCommand);
			this.IsNew = false; // uložený objekt není už nový, dostal i přidělené ID
			
			IdentityMap currentIdentityMap = IdentityMapScope.Current;
			global::Havit.Diagnostics.Contracts.Contract.Assert(currentIdentityMap != null, "currentIdentityMap != null");
			currentIdentityMap.Store(this);
		}
		
		/// <summary>
		/// Implementace metody vloží nový objekt do databáze a nastaví nově přidělené ID (primární klíč).
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_FullInsert(DbTransaction transaction)
		{
			DbCommand dbCommand;
			dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			DbParameter dbParameterUsername = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterUsername.DbType = DbType.AnsiString;
			dbParameterUsername.Size = 50;
			dbParameterUsername.Direction = ParameterDirection.Input;
			dbParameterUsername.ParameterName = "Username";
			dbParameterUsername.Value = _UsernamePropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterUsername);
			_UsernamePropertyHolder.IsDirty = false;
			
			DbParameter dbParameterPassword = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterPassword.DbType = DbType.String;
			dbParameterPassword.Size = 30;
			dbParameterPassword.Direction = ParameterDirection.Input;
			dbParameterPassword.ParameterName = "Password";
			dbParameterPassword.Value = _PasswordPropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterPassword);
			_PasswordPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterDisplayAs = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterDisplayAs.DbType = DbType.String;
			dbParameterDisplayAs.Size = 50;
			dbParameterDisplayAs.Direction = ParameterDirection.Input;
			dbParameterDisplayAs.ParameterName = "DisplayAs";
			dbParameterDisplayAs.Value = _DisplayAsPropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterDisplayAs);
			_DisplayAsPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterEmail = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterEmail.DbType = DbType.String;
			dbParameterEmail.Size = 100;
			dbParameterEmail.Direction = ParameterDirection.Input;
			dbParameterEmail.ParameterName = "Email";
			dbParameterEmail.Value = _EmailPropertyHolder.Value ?? String.Empty;
			dbCommand.Parameters.Add(dbParameterEmail);
			_EmailPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterDisabled = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterDisabled.DbType = DbType.Boolean;
			dbParameterDisabled.Direction = ParameterDirection.Input;
			dbParameterDisabled.ParameterName = "Disabled";
			dbParameterDisabled.Value = _DisabledPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterDisabled);
			_DisabledPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterLockedTime = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterLockedTime.DbType = DbType.DateTime;
			dbParameterLockedTime.Direction = ParameterDirection.Input;
			dbParameterLockedTime.ParameterName = "LockedTime";
			dbParameterLockedTime.Value = (_LockedTimePropertyHolder.Value == null) ? DBNull.Value : (object)_LockedTimePropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterLockedTime);
			_LockedTimePropertyHolder.IsDirty = false;
			
			DbParameter dbParameterLoginLast = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterLoginLast.DbType = DbType.DateTime;
			dbParameterLoginLast.Direction = ParameterDirection.Input;
			dbParameterLoginLast.ParameterName = "LoginLast";
			dbParameterLoginLast.Value = (_LoginLastPropertyHolder.Value == null) ? DBNull.Value : (object)_LoginLastPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterLoginLast);
			_LoginLastPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterLoginCount = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterLoginCount.DbType = DbType.Int32;
			dbParameterLoginCount.Direction = ParameterDirection.Input;
			dbParameterLoginCount.ParameterName = "LoginCount";
			dbParameterLoginCount.Value = _LoginCountPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterLoginCount);
			_LoginCountPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterCreated = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterCreated.DbType = DbType.DateTime;
			dbParameterCreated.Direction = ParameterDirection.Input;
			dbParameterCreated.ParameterName = "Created";
			dbParameterCreated.Value = _CreatedPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterCreated);
			_CreatedPropertyHolder.IsDirty = false;
			
			StringBuilder collectionCommandBuilder = new StringBuilder();
			
			if (_RolePropertyHolder.Value.Count > 0)
			{
				SqlParameter dbParameterRole = new SqlParameter("Role", SqlDbType.Structured);
				dbParameterRole.TypeName = "dbo.IntTable";
				dbParameterRole.Value = IntTable.GetSqlParameterValue(this._RolePropertyHolder.Value.GetIDs());
				dbCommand.Parameters.Add(dbParameterRole);
				
				collectionCommandBuilder.Append("INSERT INTO [dbo].[Uzivatel_Role] (UzivatelID, RoleID) SELECT @UzivatelID AS UzivatelID, Value AS RoleID FROM @Role; ");
			}
			
			dbCommand.CommandText = "DECLARE @UzivatelID INT; INSERT INTO [dbo].[Uzivatel] ([Username], [Password], [DisplayAs], [Email], [Disabled], [LockedTime], [LoginLast], [LoginCount], [Created]) VALUES (@Username, @Password, @DisplayAs, @Email, @Disabled, @LockedTime, @LoginLast, @LoginCount, @Created); SELECT @UzivatelID = SCOPE_IDENTITY(); " + collectionCommandBuilder.ToString() + "SELECT @UzivatelID; ";
			this.ID = (int)DbConnector.Default.ExecuteScalar(dbCommand);
			this.IsNew = false; // uložený objekt není už nový, dostal i přidělené ID
			
			IdentityMap currentIdentityMap = IdentityMapScope.Current;
			global::Havit.Diagnostics.Contracts.Contract.Assert(currentIdentityMap != null, "currentIdentityMap != null");
			currentIdentityMap.Store(this);
			
			InvalidateAnySaveCacheDependencyKey();
		}
		
		/// <summary>
		/// Implementace metody aktualizuje data objektu v databázi.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_Update(DbTransaction transaction)
		{
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			StringBuilder commandBuilder = new StringBuilder();
			commandBuilder.Append("UPDATE [dbo].[Uzivatel] SET ");
			
			bool dirtyFieldExists = false;
			if (_UsernamePropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[Username] = @Username");
				
				DbParameter dbParameterUsername = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterUsername.DbType = DbType.AnsiString;
				dbParameterUsername.Size = 50;
				dbParameterUsername.Direction = ParameterDirection.Input;
				dbParameterUsername.ParameterName = "Username";
				dbParameterUsername.Value = _UsernamePropertyHolder.Value ?? String.Empty;
				dbCommand.Parameters.Add(dbParameterUsername);
				
				dirtyFieldExists = true;
			}
			
			if (_PasswordPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[Password] = @Password");
				
				DbParameter dbParameterPassword = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterPassword.DbType = DbType.String;
				dbParameterPassword.Size = 30;
				dbParameterPassword.Direction = ParameterDirection.Input;
				dbParameterPassword.ParameterName = "Password";
				dbParameterPassword.Value = _PasswordPropertyHolder.Value ?? String.Empty;
				dbCommand.Parameters.Add(dbParameterPassword);
				
				dirtyFieldExists = true;
			}
			
			if (_DisplayAsPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[DisplayAs] = @DisplayAs");
				
				DbParameter dbParameterDisplayAs = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterDisplayAs.DbType = DbType.String;
				dbParameterDisplayAs.Size = 50;
				dbParameterDisplayAs.Direction = ParameterDirection.Input;
				dbParameterDisplayAs.ParameterName = "DisplayAs";
				dbParameterDisplayAs.Value = _DisplayAsPropertyHolder.Value ?? String.Empty;
				dbCommand.Parameters.Add(dbParameterDisplayAs);
				
				dirtyFieldExists = true;
			}
			
			if (_EmailPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[Email] = @Email");
				
				DbParameter dbParameterEmail = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterEmail.DbType = DbType.String;
				dbParameterEmail.Size = 100;
				dbParameterEmail.Direction = ParameterDirection.Input;
				dbParameterEmail.ParameterName = "Email";
				dbParameterEmail.Value = _EmailPropertyHolder.Value ?? String.Empty;
				dbCommand.Parameters.Add(dbParameterEmail);
				
				dirtyFieldExists = true;
			}
			
			if (_DisabledPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[Disabled] = @Disabled");
				
				DbParameter dbParameterDisabled = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterDisabled.DbType = DbType.Boolean;
				dbParameterDisabled.Direction = ParameterDirection.Input;
				dbParameterDisabled.ParameterName = "Disabled";
				dbParameterDisabled.Value = _DisabledPropertyHolder.Value;
				dbCommand.Parameters.Add(dbParameterDisabled);
				
				dirtyFieldExists = true;
			}
			
			if (_LockedTimePropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[LockedTime] = @LockedTime");
				
				DbParameter dbParameterLockedTime = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterLockedTime.DbType = DbType.DateTime;
				dbParameterLockedTime.Direction = ParameterDirection.Input;
				dbParameterLockedTime.ParameterName = "LockedTime";
				dbParameterLockedTime.Value = (_LockedTimePropertyHolder.Value == null) ? DBNull.Value : (object)_LockedTimePropertyHolder.Value;
				dbCommand.Parameters.Add(dbParameterLockedTime);
				
				dirtyFieldExists = true;
			}
			
			if (_LoginLastPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[LoginLast] = @LoginLast");
				
				DbParameter dbParameterLoginLast = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterLoginLast.DbType = DbType.DateTime;
				dbParameterLoginLast.Direction = ParameterDirection.Input;
				dbParameterLoginLast.ParameterName = "LoginLast";
				dbParameterLoginLast.Value = (_LoginLastPropertyHolder.Value == null) ? DBNull.Value : (object)_LoginLastPropertyHolder.Value;
				dbCommand.Parameters.Add(dbParameterLoginLast);
				
				dirtyFieldExists = true;
			}
			
			if (_LoginCountPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[LoginCount] = @LoginCount");
				
				DbParameter dbParameterLoginCount = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterLoginCount.DbType = DbType.Int32;
				dbParameterLoginCount.Direction = ParameterDirection.Input;
				dbParameterLoginCount.ParameterName = "LoginCount";
				dbParameterLoginCount.Value = _LoginCountPropertyHolder.Value;
				dbCommand.Parameters.Add(dbParameterLoginCount);
				
				dirtyFieldExists = true;
			}
			
			if (_CreatedPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[Created] = @Created");
				
				DbParameter dbParameterCreated = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterCreated.DbType = DbType.DateTime;
				dbParameterCreated.Direction = ParameterDirection.Input;
				dbParameterCreated.ParameterName = "Created";
				dbParameterCreated.Value = _CreatedPropertyHolder.Value;
				dbCommand.Parameters.Add(dbParameterCreated);
				
				dirtyFieldExists = true;
			}
			
			if (dirtyFieldExists)
			{
				// objekt je sice IsDirty (volá se tato metoda), ale může být změněná jen kolekce
				commandBuilder.Append(" WHERE [UzivatelID] = @UzivatelID; ");
			}
			else
			{
				commandBuilder = new StringBuilder();
			}
			
			bool dirtyCollectionExists = false;
			if (_RolePropertyHolder.IsDirty)
			{
				dirtyCollectionExists = true;
				commandBuilder.AppendFormat("DELETE FROM [dbo].[Uzivatel_Role] WHERE [UzivatelID] = @UzivatelID; ");
				if (_RolePropertyHolder.Value.Count > 0)
				{
					SqlParameter dbParameterRole = new SqlParameter("Role", SqlDbType.Structured);
					dbParameterRole.TypeName = "dbo.IntTable";
					dbParameterRole.Value = IntTable.GetSqlParameterValue(this._RolePropertyHolder.Value.GetIDs());
					dbCommand.Parameters.Add(dbParameterRole);
					
					commandBuilder.Append("INSERT INTO [dbo].[Uzivatel_Role] (UzivatelID, RoleID) SELECT @UzivatelID AS UzivatelID, Value AS RoleID FROM @Role; ");
				}
			}
			
			// pokud je objekt dirty, ale žádná property není dirty (Save_MinimalInsert poukládal všechno), neukládáme
			if (dirtyFieldExists || dirtyCollectionExists)
			{
				DbParameter dbParameterUzivatelID = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterUzivatelID.DbType = DbType.Int32;
				dbParameterUzivatelID.Direction = ParameterDirection.Input;
				dbParameterUzivatelID.ParameterName = "UzivatelID";
				dbParameterUzivatelID.Value = this.ID;
				dbCommand.Parameters.Add(dbParameterUzivatelID);
				dbCommand.CommandText = commandBuilder.ToString();
				DbConnector.Default.ExecuteNonQuery(dbCommand);
			}
			
			InvalidateSaveCacheDependencyKey();
			InvalidateAnySaveCacheDependencyKey();
		}
		
		/// <summary>
		/// Ukládá hodnoty potřebné pro provedení minimálního insertu. Volá Save_Insert_SaveRequiredForMinimalInsert.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_Insert_InsertRequiredForMinimalInsert(DbTransaction transaction)
		{
			base.Save_Insert_InsertRequiredForMinimalInsert(transaction);
			
		}
		
		/// <summary>
		/// Ukládá hodnoty potřebné pro provedení plného insertu.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_Insert_InsertRequiredForFullInsert(DbTransaction transaction)
		{
			base.Save_Insert_InsertRequiredForFullInsert(transaction);
			
			foreach (Havit.BusinessLayerTest.Role roleBase in Role)
			{
				if (roleBase.IsNew)
				{
					roleBase.Save_MinimalInsert(transaction);
				}
			}
			
		}
		
		/// <summary>
		/// Metoda vymaže objekt z perzistentního uložiště.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Delete_Perform(DbTransaction transaction)
		{
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			StringBuilder commandBuilder = new StringBuilder();
			if (_RolePropertyHolder.IsDirty)
			{
				commandBuilder.AppendFormat("DELETE FROM [dbo].[Uzivatel_Role] WHERE [UzivatelID] = @UzivatelID; ");
				if (_RolePropertyHolder.Value.Count > 0)
				{
					SqlParameter dbParameterRole = new SqlParameter("Role", SqlDbType.Structured);
					dbParameterRole.TypeName = "dbo.IntTable";
					dbParameterRole.Value = IntTable.GetSqlParameterValue(this._RolePropertyHolder.Value.GetIDs());
					dbCommand.Parameters.Add(dbParameterRole);
					
					commandBuilder.Append("INSERT INTO [dbo].[Uzivatel_Role] (UzivatelID, RoleID) SELECT @UzivatelID AS UzivatelID, Value AS RoleID FROM @Role; ");
				}
			}
			
			commandBuilder.AppendFormat("DELETE FROM [dbo].[Uzivatel] WHERE [UzivatelID] = @UzivatelID");
			
			DbParameter dbParameterUzivatelID = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterUzivatelID.DbType = DbType.Int32;
			dbParameterUzivatelID.Direction = ParameterDirection.Input;
			dbParameterUzivatelID.ParameterName = "UzivatelID";
			dbParameterUzivatelID.Value = this.ID;
			dbCommand.Parameters.Add(dbParameterUzivatelID);
			
			dbCommand.CommandText = commandBuilder.ToString();
			DbConnector.Default.ExecuteNonQuery(dbCommand);
			
			InvalidateSaveCacheDependencyKey();
			InvalidateAnySaveCacheDependencyKey();
		}
		
		#endregion
		
		#region Cache dependencies methods
		/// <summary>
		/// Vrátí klíč pro tvorbu závislostí cache na objektu. Při uložení objektu jsou závislosti invalidovány.
		/// </summary>
		public string GetSaveCacheDependencyKey(bool ensureInCache = true)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(!this.IsNew, "!this.IsNew");
			
			if (!Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)
			{
				throw new InvalidOperationException("Použitá BusinessLayerCacheService nepodporuje cache dependencies.");
			}
			
			string key = "Uzivatel.SaveCacheDependencyKey|ID=" + this.ID.ToString();
			
			if (ensureInCache)
			{
				Havit.Business.BusinessLayerContext.BusinessLayerCacheService.EnsureCacheDependencyKey(typeof(Uzivatel), key);
			}
			
			return key;
		}
		
		/// <summary>
		/// Odstraní z cache závislosti na klíči CacheDependencyKey.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected void InvalidateSaveCacheDependencyKey()
		{
			if (Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)
			{
				Havit.Business.BusinessLayerContext.BusinessLayerCacheService.InvalidateCacheDependencies(typeof(Uzivatel), GetSaveCacheDependencyKey(false));
			}
		}
		
		/// <summary>
		/// Vrátí klíč pro tvorbu závislostí cache. Po uložení jakéhokoliv objektu této třídy jsou závislosti invalidovány.
		/// </summary>
		public static string GetAnySaveCacheDependencyKey(bool ensureInCache = true)
		{
			if (!Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)
			{
				throw new InvalidOperationException("Použitá BusinessLayerCacheService nepodporuje cache dependencies.");
			}
			
			string key = "Uzivatel.AnySaveCacheDependencyKey";
			
			if (ensureInCache)
			{
				Havit.Business.BusinessLayerContext.BusinessLayerCacheService.EnsureCacheDependencyKey(typeof(Uzivatel), key);
			}
			
			return key;
		}
		
		/// <summary>
		/// Odstraní z cache závislosti na klíči AnySaveCacheDependencyKey.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected static void InvalidateAnySaveCacheDependencyKey()
		{
			if (Havit.Business.BusinessLayerContext.BusinessLayerCacheService.SupportsCacheDependencies)
			{
				Havit.Business.BusinessLayerContext.BusinessLayerCacheService.InvalidateCacheDependencies(typeof(Uzivatel), GetAnySaveCacheDependencyKey(false));
			}
		}
		#endregion
		
		#region GetFirst, GetList, GetAll
		/// <summary>
		/// Vrátí první nalezený objekt typu Uzivatel dle parametrů v queryParams.
		/// Pokud není žádný objekt nalezen, vrací null.
		/// </summary>
		public static Uzivatel GetFirst(QueryParams queryParams)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			return Uzivatel.GetFirst(queryParams, null);
		}
		
		/// <summary>
		/// Vrátí první nalezený objekt typu Uzivatel dle parametrů v queryParams.
		/// Pokud není žádný objekt nalezen, vrací null. Data jsou načítána v předané transakci.
		/// </summary>
		public static Uzivatel GetFirst(QueryParams queryParams, DbTransaction transaction)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			int? originalTopRecords = queryParams.TopRecords;
			queryParams.TopRecords = 1;
			UzivatelCollection getListResult = Uzivatel.GetList(queryParams, transaction);
			queryParams.TopRecords = originalTopRecords;
			return (getListResult.Count == 0) ? null : getListResult[0];
		}
		
		/// <summary>
		/// Vrátí objekty typu Uzivatel dle parametrů v queryParams.
		/// </summary>
		internal static UzivatelCollection GetList(QueryParams queryParams)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			return Uzivatel.GetList(queryParams, null);
		}
		
		/// <summary>
		/// Vrátí objekty typu Uzivatel dle parametrů v queryParams. Data jsou načítána v předané transakci.
		/// </summary>
		internal static UzivatelCollection GetList(QueryParams queryParams, DbTransaction transaction)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			queryParams.ObjectInfo = Uzivatel.ObjectInfo;
			if (queryParams.Properties.Count > 0)
			{
				queryParams.Properties.Add(Uzivatel.Properties.ID);
			}
			
			queryParams.PrepareCommand(dbCommand, SqlServerPlatform.SqlServer2008, CommandBuilderOptions.None);
			return Uzivatel.GetList(dbCommand, queryParams.GetDataLoadPower());
		}
		
		private static UzivatelCollection GetList(DbCommand dbCommand, DataLoadPower dataLoadPower)
		{
			if (dbCommand == null)
			{
				throw new ArgumentNullException("dbCommand");
			}
			
			UzivatelCollection result = new UzivatelCollection();
			
			using (DbDataReader reader = DbConnector.Default.ExecuteReader(dbCommand))
			{
				while (reader.Read())
				{
					DataRecord dataRecord = new DataRecord(reader, dataLoadPower);
					Uzivatel uzivatel = Uzivatel.GetObject(dataRecord);
					result.Add(uzivatel);
				}
			}
			
			return result;
		}
		
		/// <summary>
		/// Vrátí všechny objekty typu Uzivatel.
		/// </summary>
		public static UzivatelCollection GetAll()
		{
			UzivatelCollection collection = null;
			QueryParams queryParams = new QueryParams();
			collection = Uzivatel.GetList(queryParams);
			return collection;
		}
		
		#endregion
		
		#region ToString
		/// <summary>
		/// Returns a string that represents the current object.
		/// </summary>
		public override string ToString()
		{
			if (IsNew)
			{
				return "Uzivatel(New)";
			}
			
			return String.Format("Uzivatel(ID={0})", this.ID);
		}
		#endregion
		
		#region ObjectInfo
		/// <summary>
		/// Objektová reprezentace metadat typu Uzivatel.
		/// </summary>
		public static ObjectInfo ObjectInfo
		{
			get
			{
				return objectInfo;
			}
		}
		private static ObjectInfo objectInfo;
		#endregion
		
		#region Properties
		/// <summary>
		/// Objektová reprezentace metadat vlastností typu Uzivatel.
		/// </summary>
		public static UzivatelProperties Properties
		{
			get
			{
				return properties;
			}
		}
		private static UzivatelProperties properties;
		#endregion
		
	}
}
