//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.Caching;
using System.Xml;
using Havit.Business;
using Havit.Business.Query;
using Havit.Collections;
using Havit.Data;
using Havit.Data.SqlClient;
using Havit.Data.SqlServer;
using Havit.Data.SqlTypes;

namespace Havit.BusinessLayerTest.VnitrostatniDistribuce
{
	/// <summary>
	/// Cena v tarifu pro danou hmotnost. [cached]
	/// </summary>
	/// <remarks>
	/// <code>
	/// CREATE TABLE [dbo].[TarifHmotnostItem](
	/// 	[TarifHmotnostItemID] [int] IDENTITY(1,1) NOT NULL,
	/// 	[CenaAmount] [money] NOT NULL,
	/// 	[CenaCurrencyID] [int] NOT NULL,
	///  CONSTRAINT [PK_TarifHmotnostItem] PRIMARY KEY CLUSTERED 
	/// (
	/// 	[TarifHmotnostItemID] ASC
	/// )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	/// ) ON [PRIMARY]
	/// ALTER TABLE [dbo].[TarifHmotnostItem]  WITH NOCHECK ADD  CONSTRAINT [FK_TarifHmotnostItem_Currency] FOREIGN KEY([CenaCurrencyID])
	/// REFERENCES [dbo].[Currency] ([CurrencyID])
	/// ALTER TABLE [dbo].[TarifHmotnostItem] CHECK CONSTRAINT [FK_TarifHmotnostItem_Currency]
	/// </code>
	/// </remarks>
	[System.CodeDom.Compiler.GeneratedCode("Havit.BusinessLayerGenerator", "1.0")]
	public abstract class TarifHmotnostItemBase : ActiveRecordBusinessObjectBase
	{
		#region Static constructor
		static TarifHmotnostItemBase()
		{
			objectInfo = new ObjectInfo();
			properties = new TarifHmotnostItemProperties();
			objectInfo.Initialize("dbo", "TarifHmotnostItem", "TarifHmotnostItem", "Havit.BusinessLayerTest.VnitrostatniDistribuce", false, TarifHmotnostItem.CreateObject, TarifHmotnostItem.GetObject, TarifHmotnostItem.GetAll, null, properties.All);
			properties.Initialize(objectInfo);
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// Vytvoří instanci objektu jako nový prvek.
		/// </summary>
		protected TarifHmotnostItemBase() : base()
		{
		}
		
		/// <summary>
		/// Vytvoří instanci existujícího objektu.
		/// </summary>
		/// <param name="id">TarifHmotnostItemID (PK).</param>
		protected TarifHmotnostItemBase(int id) : base(id)
		{
		}
		
		/// <summary>
		/// Vytvoří instanci objektu na základě dat (i částečných) načtených z databáze.
		/// </summary>
		/// <param name="id">TarifHmotnostItemID (PK).</param>
		/// <param name="record">DataRecord s daty objektu (i částečnými).</param>
		protected TarifHmotnostItemBase(int id, DataRecord record) : base(id, record)
		{
		}
		#endregion
		
		#region Properties dle sloupců databázové tabulky
		/// <summary>
		/// Cena. [money, not-null]
		/// </summary>
		protected virtual Decimal CenaAmount
		{
			get
			{
				EnsureLoaded();
				return _CenaAmountPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				_CenaAmountPropertyHolder.Value = value;
				UpdateCenaFromUnderlyingProperties();
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost CenaAmount.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<Decimal> _CenaAmountPropertyHolder;
		
		/// <summary>
		/// Cena (měna). [int, not-null]
		/// </summary>
		protected virtual Havit.BusinessLayerTest.Currency CenaCurrency
		{
			get
			{
				EnsureLoaded();
				return _CenaCurrencyPropertyHolder.Value;
			}
			set
			{
				EnsureLoaded();
				_CenaCurrencyPropertyHolder.Value = value;
				UpdateCenaFromUnderlyingProperties();
			}
		}
		/// <summary>
		/// PropertyHolder pro vlastnost CenaCurrency.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected PropertyHolder<Havit.BusinessLayerTest.Currency> _CenaCurrencyPropertyHolder;
		
		#region Money properties
		/// <summary>
		/// Cena.
		/// </summary>
		public virtual Havit.BusinessLayerTest.Money Cena
		{
			get
			{
				EnsureLoaded();
				if (_cena == null)
				{
					_cena = new Havit.BusinessLayerTest.Money();
					UpdateCenaFromUnderlyingProperties();
				}
				return _cena;
			}
			set
			{
				EnsureLoaded();
				
				if (_cena != null)
				{
					_cena.ValueChanged -= Cena_ValueChanged;
				}
				
				_cena = value ?? new Havit.BusinessLayerTest.Money();
				_cena.ValueChanged += Cena_ValueChanged;
				
				decimal amount  = _cena.Amount.Value;
				Havit.BusinessLayerTest.Currency currency = _cena.Currency;
				
				CenaAmount = amount;
				CenaCurrency = currency;
			}
		}
		private Havit.BusinessLayerTest.Money _cena;
		
		/// <summary>
		/// Aktualizuje hodnotu vlastnosti Cena z vlastností pro Amount a Currency.
		/// </summary>
		private void UpdateCenaFromUnderlyingProperties()
		{
			if ((!updateCenaFromUnderlyingPropertiesSuppressed) && (_cena != null))
			{
				_cena.ValueChanged -= Cena_ValueChanged;
				
				decimal amount = _CenaAmountPropertyHolder.Value;
				Havit.BusinessLayerTest.Currency currency = _CenaCurrencyPropertyHolder.Value;
				
				_cena.Amount = amount;
				_cena.Currency = currency;
				
				_cena.ValueChanged += Cena_ValueChanged;
			}
		}
		private bool updateCenaFromUnderlyingPropertiesSuppressed;
		
		private void Cena_ValueChanged(object sender, EventArgs e)
		{
			updateCenaFromUnderlyingPropertiesSuppressed = true;
			CenaAmount = ((Havit.BusinessLayerTest.Money)sender).Amount.Value;
			CenaCurrency = ((Havit.BusinessLayerTest.Money)sender).Currency;
			updateCenaFromUnderlyingPropertiesSuppressed = false;
		}
		
		#endregion
		
		#endregion
		
		#region Init
		/// <summary>
		/// Inicializuje třídu (vytvoří instance PropertyHolderů).
		/// </summary>
		protected override void Init()
		{
			_CenaAmountPropertyHolder = new PropertyHolder<Decimal>(this);
			_CenaCurrencyPropertyHolder = new PropertyHolder<Havit.BusinessLayerTest.Currency>(this);
			
			if (IsNew)
			{
				_CenaAmountPropertyHolder.Value = default(Decimal);
				_CenaCurrencyPropertyHolder.Value = null;
			}
			
			base.Init();
		}
		#endregion
		
		#region CheckConstraints
		/// <summary>
		/// Kontroluje konzistenci objektu jako celku.
		/// </summary>
		/// <remarks>
		/// Automaticky je voláno před ukládáním objektu Save(), pokud je objekt opravdu ukládán.
		/// </remarks>
		protected override void CheckConstraints()
		{
			base.CheckConstraints();
			
			if (_CenaCurrencyPropertyHolder.IsDirty && (_CenaCurrencyPropertyHolder.Value == null))
			{
				throw new ConstraintViolationException(this, "Vlastnost \"CenaCurrency\" nesmí nabývat hodnoty null.");
			}
			
		}
		#endregion
		
		#region Load: Load_GetDataRecord, Load_ParseDataRecord
		/// <summary>
		/// Načte data objektu z DB a vrátí je ve formě DataRecordu.
		/// </summary>
		/// <param name="transaction">Transakce.</param>
		/// <returns>Úplná data objektu.</returns>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed DataRecord Load_GetDataRecord(DbTransaction transaction)
		{
			DataRecord result;
			
			result = GetDataRecordFromCache(this.ID);
			if (result != null)
			{
				return result;
			}
			
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.CommandText = "SELECT [TarifHmotnostItemID], [CenaAmount], [CenaCurrencyID] FROM [dbo].[TarifHmotnostItem] WHERE [TarifHmotnostItemID] = @TarifHmotnostItemID";
			dbCommand.Transaction = transaction;
			
			DbParameter dbParameterTarifHmotnostItemID = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterTarifHmotnostItemID.DbType = DbType.Int32;
			dbParameterTarifHmotnostItemID.Direction = ParameterDirection.Input;
			dbParameterTarifHmotnostItemID.ParameterName = "TarifHmotnostItemID";
			dbParameterTarifHmotnostItemID.Value = this.ID;
			dbCommand.Parameters.Add(dbParameterTarifHmotnostItemID);
			
			result = DbConnector.Default.ExecuteDataRecord(dbCommand);
			if (result != null)
			{
				AddDataRecordToCache(this.ID, result);
			}
			
			return result;
		}
		
		/// <summary>
		/// Vytahá data objektu z DataRecordu.
		/// </summary>
		/// <param name="record">DataRecord s daty objektu</param>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Load_ParseDataRecord(DataRecord record)
		{
			this.ID = record.Get<int>("TarifHmotnostItemID");
			
			Decimal _tempCenaAmount;
			if (record.TryGet<Decimal>("CenaAmount", out _tempCenaAmount))
			{
				_CenaAmountPropertyHolder.Value = _tempCenaAmount;
			}
			
			int _tempCenaCurrency;
			if (record.TryGet<int>("CenaCurrencyID", out _tempCenaCurrency))
			{
				_CenaCurrencyPropertyHolder.Value = Havit.BusinessLayerTest.Currency.GetObject(_tempCenaCurrency);
			}
			
		}
		#endregion
		
		#region Save & Delete: Save_SaveMembers, Save_SaveCollections, Save_MinimalInsert, Save_FullInsert, Save_Update, Save_Insert_InsertRequiredForMinimalInsert, Save_Insert_InsertRequiredForFullInsert, Delete, Delete_Perform
		
		/// <summary>
		/// Ukládá member-objekty.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_SaveMembers(DbTransaction transaction)
		{
			base.Save_SaveMembers(transaction);
			
			if (_CenaCurrencyPropertyHolder.IsInitialized && (_CenaCurrencyPropertyHolder.Value != null))
			{
				_CenaCurrencyPropertyHolder.Value.Save(transaction);
			}
			
		}
		
		/// <summary>
		/// Ukládá member-kolekce objektu.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_SaveCollections(DbTransaction transaction)
		{
			base.Save_SaveCollections(transaction);
			
			// Není co ukládat.
		}
		
		/// <summary>
		/// Implementace metody vloží jen not-null vlastnosti objektu do databáze a nastaví nově přidělené ID (primární klíč).
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		public override sealed void Save_MinimalInsert(DbTransaction transaction)
		{
			base.Save_MinimalInsert(transaction);
			Save_Insert_InsertRequiredForMinimalInsert(transaction);
			
			DbCommand dbCommand;
			dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			DbParameter dbParameterCenaAmount = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterCenaAmount.DbType = DbType.Decimal;
			dbParameterCenaAmount.Direction = ParameterDirection.Input;
			dbParameterCenaAmount.ParameterName = "CenaAmount";
			dbParameterCenaAmount.Value = _CenaAmountPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterCenaAmount);
			_CenaAmountPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterCenaCurrencyID = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterCenaCurrencyID.DbType = DbType.Int32;
			dbParameterCenaCurrencyID.Direction = ParameterDirection.Input;
			dbParameterCenaCurrencyID.ParameterName = "CenaCurrencyID";
			dbParameterCenaCurrencyID.Value = (_CenaCurrencyPropertyHolder.Value == null) ? DBNull.Value : (object)_CenaCurrencyPropertyHolder.Value.ID;
			dbCommand.Parameters.Add(dbParameterCenaCurrencyID);
			_CenaCurrencyPropertyHolder.IsDirty = false;
			
			dbCommand.CommandText = "DECLARE @TarifHmotnostItemID INT; INSERT INTO [dbo].[TarifHmotnostItem] ([CenaAmount], [CenaCurrencyID]) VALUES (@CenaAmount, @CenaCurrencyID); SELECT @TarifHmotnostItemID = SCOPE_IDENTITY(); SELECT @TarifHmotnostItemID; ";
			this.ID = (int)DbConnector.Default.ExecuteScalar(dbCommand);
			this.IsNew = false; // uložený objekt není už nový, dostal i přidělené ID
			
			IdentityMap currentIdentityMap = IdentityMapScope.Current;
			global::Havit.Diagnostics.Contracts.Contract.Assert(currentIdentityMap != null, "currentIdentityMap != null");
			currentIdentityMap.Store(this);
		}
		
		/// <summary>
		/// Implementace metody vloží nový objekt do databáze a nastaví nově přidělené ID (primární klíč).
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_FullInsert(DbTransaction transaction)
		{
			DbCommand dbCommand;
			dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			DbParameter dbParameterCenaAmount = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterCenaAmount.DbType = DbType.Decimal;
			dbParameterCenaAmount.Direction = ParameterDirection.Input;
			dbParameterCenaAmount.ParameterName = "CenaAmount";
			dbParameterCenaAmount.Value = _CenaAmountPropertyHolder.Value;
			dbCommand.Parameters.Add(dbParameterCenaAmount);
			_CenaAmountPropertyHolder.IsDirty = false;
			
			DbParameter dbParameterCenaCurrencyID = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterCenaCurrencyID.DbType = DbType.Int32;
			dbParameterCenaCurrencyID.Direction = ParameterDirection.Input;
			dbParameterCenaCurrencyID.ParameterName = "CenaCurrencyID";
			dbParameterCenaCurrencyID.Value = (_CenaCurrencyPropertyHolder.Value == null) ? DBNull.Value : (object)_CenaCurrencyPropertyHolder.Value.ID;
			dbCommand.Parameters.Add(dbParameterCenaCurrencyID);
			_CenaCurrencyPropertyHolder.IsDirty = false;
			
			dbCommand.CommandText = "DECLARE @TarifHmotnostItemID INT; INSERT INTO [dbo].[TarifHmotnostItem] ([CenaAmount], [CenaCurrencyID]) VALUES (@CenaAmount, @CenaCurrencyID); SELECT @TarifHmotnostItemID = SCOPE_IDENTITY(); SELECT @TarifHmotnostItemID; ";
			this.ID = (int)DbConnector.Default.ExecuteScalar(dbCommand);
			this.IsNew = false; // uložený objekt není už nový, dostal i přidělené ID
			
			IdentityMap currentIdentityMap = IdentityMapScope.Current;
			global::Havit.Diagnostics.Contracts.Contract.Assert(currentIdentityMap != null, "currentIdentityMap != null");
			currentIdentityMap.Store(this);
			
			RemoveGetAllCacheItems();
		}
		
		/// <summary>
		/// Implementace metody aktualizuje data objektu v databázi.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_Update(DbTransaction transaction)
		{
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			StringBuilder commandBuilder = new StringBuilder();
			commandBuilder.Append("UPDATE [dbo].[TarifHmotnostItem] SET ");
			
			bool dirtyFieldExists = false;
			if (_CenaAmountPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[CenaAmount] = @CenaAmount");
				
				DbParameter dbParameterCenaAmount = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterCenaAmount.DbType = DbType.Decimal;
				dbParameterCenaAmount.Direction = ParameterDirection.Input;
				dbParameterCenaAmount.ParameterName = "CenaAmount";
				dbParameterCenaAmount.Value = _CenaAmountPropertyHolder.Value;
				dbCommand.Parameters.Add(dbParameterCenaAmount);
				
				dirtyFieldExists = true;
			}
			
			if (_CenaCurrencyPropertyHolder.IsDirty)
			{
				if (dirtyFieldExists)
				{
					commandBuilder.Append(", ");
				}
				commandBuilder.Append("[CenaCurrencyID] = @CenaCurrencyID");
				
				DbParameter dbParameterCenaCurrencyID = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterCenaCurrencyID.DbType = DbType.Int32;
				dbParameterCenaCurrencyID.Direction = ParameterDirection.Input;
				dbParameterCenaCurrencyID.ParameterName = "CenaCurrencyID";
				dbParameterCenaCurrencyID.Value = (_CenaCurrencyPropertyHolder.Value == null) ? DBNull.Value : (object)_CenaCurrencyPropertyHolder.Value.ID;
				dbCommand.Parameters.Add(dbParameterCenaCurrencyID);
				
				dirtyFieldExists = true;
			}
			
			if (dirtyFieldExists)
			{
				// objekt je sice IsDirty (volá se tato metoda), ale může být změněná jen kolekce
				commandBuilder.Append(" WHERE [TarifHmotnostItemID] = @TarifHmotnostItemID; ");
			}
			else
			{
				commandBuilder = new StringBuilder();
			}
			
			bool dirtyCollectionExists = false;
			// pokud je objekt dirty, ale žádná property není dirty (Save_MinimalInsert poukládal všechno), neukládáme
			if (dirtyFieldExists || dirtyCollectionExists)
			{
				DbParameter dbParameterTarifHmotnostItemID = DbConnector.Default.ProviderFactory.CreateParameter();
				dbParameterTarifHmotnostItemID.DbType = DbType.Int32;
				dbParameterTarifHmotnostItemID.Direction = ParameterDirection.Input;
				dbParameterTarifHmotnostItemID.ParameterName = "TarifHmotnostItemID";
				dbParameterTarifHmotnostItemID.Value = this.ID;
				dbCommand.Parameters.Add(dbParameterTarifHmotnostItemID);
				dbCommand.CommandText = commandBuilder.ToString();
				DbConnector.Default.ExecuteNonQuery(dbCommand);
			}
			
			RemoveDataRecordFromCache(this.ID);
			RemoveGetAllCacheItems();
		}
		
		/// <summary>
		/// Ukládá hodnoty potřebné pro provedení minimálního insertu. Volá Save_Insert_SaveRequiredForMinimalInsert.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_Insert_InsertRequiredForMinimalInsert(DbTransaction transaction)
		{
			base.Save_Insert_InsertRequiredForMinimalInsert(transaction);
			
			if (_CenaCurrencyPropertyHolder.Value.IsNew)
			{
				_CenaCurrencyPropertyHolder.Value.Save_MinimalInsert(transaction);
			}
			
		}
		
		/// <summary>
		/// Ukládá hodnoty potřebné pro provedení plného insertu.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Save_Insert_InsertRequiredForFullInsert(DbTransaction transaction)
		{
			base.Save_Insert_InsertRequiredForFullInsert(transaction);
			
		}
		
		/// <summary>
		/// Metoda vymaže objekt z perzistentního uložiště.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		protected override sealed void Delete_Perform(DbTransaction transaction)
		{
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			StringBuilder commandBuilder = new StringBuilder();
			commandBuilder.AppendFormat("DELETE FROM [dbo].[TarifHmotnostItem] WHERE [TarifHmotnostItemID] = @TarifHmotnostItemID");
			
			DbParameter dbParameterTarifHmotnostItemID = DbConnector.Default.ProviderFactory.CreateParameter();
			dbParameterTarifHmotnostItemID.DbType = DbType.Int32;
			dbParameterTarifHmotnostItemID.Direction = ParameterDirection.Input;
			dbParameterTarifHmotnostItemID.ParameterName = "TarifHmotnostItemID";
			dbParameterTarifHmotnostItemID.Value = this.ID;
			dbCommand.Parameters.Add(dbParameterTarifHmotnostItemID);
			
			dbCommand.CommandText = commandBuilder.ToString();
			DbConnector.Default.ExecuteNonQuery(dbCommand);
			
			RemoveDataRecordFromCache(this.ID);
			RemoveGetAllCacheItems();
		}
		
		#endregion
		
		#region DataRecord cache access methods (static)
		
		/// <summary>
		/// Přidá DataRecord do cache.
		/// </summary>
		internal static void AddDataRecordToCache(int id, DataRecord dataRecord)
		{
			string cacheKey = "Havit.BusinessLayerTest.VnitrostatniDistribuce.TarifHmotnostItem.DataRecordsCache|ID=" + id.ToString();
			HttpRuntime.Cache.Insert(
				cacheKey,
				dataRecord,
				null, // dependencies
				Cache.NoAbsoluteExpiration,
				Cache.NoSlidingExpiration,
				CacheItemPriority.Default,
				null); // callback
		}
		
		/// <summary>
		/// Odstraní z cache DataRecord objektu daného ID.
		/// </summary>
		internal static void RemoveDataRecordFromCache(int id)
		{
			//string cacheKey = "Havit.BusinessLayerTest.VnitrostatniDistribuce.TarifHmotnostItem.DataRecordsCache|ID=" + id.ToString();
			//string cacheKey = GetCacheDependencyKeyFor();
			//HttpRuntime.Cache.Remove(cacheKey);
		}
		
		/// <summary>
		/// Vyhledá v cache DataRecord pro objekt daného ID a vrátí jej. Není-li v cache nalezen, vrací null.
		/// </summary>
		internal static DataRecord GetDataRecordFromCache(int id)
		{
			string cacheKey = "Havit.BusinessLayerTest.VnitrostatniDistribuce.TarifHmotnostItem.DataRecordsCache|ID=" + id.ToString();
			return (DataRecord)HttpRuntime.Cache[cacheKey];
		}
		#endregion
		
		#region RemoveGetAllCacheItems (static)
		/// <summary>
		/// Odstraní z cache položky používané metodou GetAll.
		/// </summary>
		/// Odstraní z cache položky používané metodou GetAll.
		private static void RemoveGetAllCacheItems()
		{
			HttpRuntime.Cache.Remove("Havit.BusinessLayerTest.VnitrostatniDistribuce.TarifHmotnostItem.GetAll");
		}
		#endregion
		
		#region GetFirst, GetList, GetAll
		/// <summary>
		/// Vrátí první nalezený objekt typu TarifHmotnostItem dle parametrů v queryParams.
		/// Pokud není žádný objekt nalezen, vrací null.
		/// </summary>
		public static TarifHmotnostItem GetFirst(QueryParams queryParams)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			return TarifHmotnostItem.GetFirst(queryParams, null);
		}
		
		/// <summary>
		/// Vrátí první nalezený objekt typu TarifHmotnostItem dle parametrů v queryParams.
		/// Pokud není žádný objekt nalezen, vrací null. Data jsou načítána v předané transakci.
		/// </summary>
		public static TarifHmotnostItem GetFirst(QueryParams queryParams, DbTransaction transaction)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			int? originalTopRecords = queryParams.TopRecords;
			queryParams.TopRecords = 1;
			TarifHmotnostItemCollection getListResult = TarifHmotnostItem.GetList(queryParams, transaction);
			queryParams.TopRecords = originalTopRecords;
			return (getListResult.Count == 0) ? null : getListResult[0];
		}
		
		/// <summary>
		/// Vrátí objekty typu TarifHmotnostItem dle parametrů v queryParams.
		/// </summary>
		public static TarifHmotnostItemCollection GetList(QueryParams queryParams)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			return TarifHmotnostItem.GetList(queryParams, null);
		}
		
		/// <summary>
		/// Vrátí objekty typu TarifHmotnostItem dle parametrů v queryParams. Data jsou načítána v předané transakci.
		/// </summary>
		public static TarifHmotnostItemCollection GetList(QueryParams queryParams, DbTransaction transaction)
		{
			global::Havit.Diagnostics.Contracts.Contract.Requires(queryParams != null, "queryParams != null");
			
			DbCommand dbCommand = DbConnector.Default.ProviderFactory.CreateCommand();
			dbCommand.Transaction = transaction;
			
			queryParams.ObjectInfo = TarifHmotnostItem.ObjectInfo;
			if (queryParams.Properties.Count > 0)
			{
				queryParams.Properties.Add(TarifHmotnostItem.Properties.ID);
			}
			
			queryParams.PrepareCommand(dbCommand, SqlServerPlatform.SqlServer2008, CommandBuilderOptions.None);
			return TarifHmotnostItem.GetList(dbCommand, queryParams.GetDataLoadPower());
		}
		
		private static TarifHmotnostItemCollection GetList(DbCommand dbCommand, DataLoadPower dataLoadPower)
		{
			if (dbCommand == null)
			{
				throw new ArgumentNullException("dbCommand");
			}
			
			TarifHmotnostItemCollection result = new TarifHmotnostItemCollection();
			
			using (DbDataReader reader = DbConnector.Default.ExecuteReader(dbCommand))
			{
				while (reader.Read())
				{
					DataRecord dataRecord = new DataRecord(reader, dataLoadPower);
					TarifHmotnostItem tarifHmotnostItem = TarifHmotnostItem.GetObject(dataRecord);
					if (dataLoadPower == DataLoadPower.FullLoad)
					{
						AddDataRecordToCache(tarifHmotnostItem.ID, dataRecord);
					}
					result.Add(tarifHmotnostItem);
				}
			}
			
			return result;
		}
		
		private static object lockGetAllCacheAccess = new object();
		
		/// <summary>
		/// Vrátí všechny objekty typu TarifHmotnostItem.
		/// </summary>
		public static TarifHmotnostItemCollection GetAll()
		{
			TarifHmotnostItemCollection collection = null;
			int[] ids = null;
			string cacheKey = "Havit.BusinessLayerTest.VnitrostatniDistribuce.TarifHmotnostItem.GetAll";
			
			ids = (int[])HttpRuntime.Cache.Get(cacheKey);
			if (ids == null)
			{
				lock (lockGetAllCacheAccess)
				{
					ids = (int[])HttpRuntime.Cache.Get(cacheKey);
					if (ids == null)
					{
						QueryParams queryParams = new QueryParams();
						collection = TarifHmotnostItem.GetList(queryParams);
						ids = collection.GetIDs();
						
						HttpRuntime.Cache.Insert(
							cacheKey,
							ids,
							null, // dependencies
							Cache.NoAbsoluteExpiration,
							Cache.NoSlidingExpiration,
							CacheItemPriority.Default,
							null); // callback
					}
				}
			}
			if (collection == null)
			{
				collection = new TarifHmotnostItemCollection();
				collection.AddRange(TarifHmotnostItem.GetObjects(ids));
				collection.LoadAll();
			}
			
			return collection;
		}
		
		#endregion
		
		#region ObjectInfo
		/// <summary>
		/// Objektová reprezentace metadat typu TarifHmotnostItem.
		/// </summary>
		public static ObjectInfo ObjectInfo
		{
			get
			{
				return objectInfo;
			}
		}
		private static ObjectInfo objectInfo;
		#endregion
		
		#region Properties
		/// <summary>
		/// Objektová reprezentace metadat vlastností typu TarifHmotnostItem.
		/// </summary>
		public static TarifHmotnostItemProperties Properties
		{
			get
			{
				return properties;
			}
		}
		private static TarifHmotnostItemProperties properties;
		#endregion
		
	}
}
