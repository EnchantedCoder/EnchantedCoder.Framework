<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Havit.Business</name>
    </assembly>
    <members>
        <member name="T:Havit.Business.Conditions.BoolCondition">
            <summary>
            Vytváří podmínku testující logickou hodnotu.
            </summary>	
        </member>
        <member name="M:Havit.Business.Conditions.BoolCondition.CreateEquals(Havit.Business.Property,System.Nullable{System.Boolean})">
            <summary>
            Vytvoří podmínku pro vlastnost rovnou dané hodnotě.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.BoolCondition.CreateTrue(Havit.Business.Property)">
            <summary>
            Vytvoří podmínku testující vlastnost na hodnotu true.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.BoolCondition.CreateFalse(Havit.Business.Property)">
            <summary>
            Vytvoří podmínku testující vlastnost na hodnotu false.
            </summary>
        </member>
        <member name="T:Havit.Business.PropertyHolderBase">
            <summary>
            Předek generického typu <see cref="T:Havit.Business.PropertyHolder`1"/>. 
            Potřebujeme kolekci PropertyHolderů a kolekci generických typů nelze udělat.
            </summary>
        </member>
        <member name="M:Havit.Business.PropertyHolderBase.CheckInitialization">
            <summary>
            Pokud nebyla hodnota PropertyHolderu nastavena, vyhodí InvalidOperationException.
            Pokud byla hodnota PropertyHolderu nastavena, neudělá nic (projde).
            </summary>
        </member>
        <member name="M:Havit.Business.PropertyHolderBase.#ctor(Havit.Business.BusinessObjectBase)">
            <summary>
            Založí instanci PropertyHolderu.
            </summary>
            <param name="owner">objekt, kterému PropertyHolder patří</param>
        </member>
        <member name="P:Havit.Business.PropertyHolderBase.Owner">
            <summary>
            Objekt, kterému property patří.
            </summary>
        </member>
        <member name="P:Havit.Business.PropertyHolderBase.IsDirty">
            <summary>
            Indikuje, zda došlo ke změně hodnoty.
            </summary>
        </member>
        <member name="P:Havit.Business.PropertyHolderBase.IsInitialized">
            <summary>
            Indikuje, zda je hodnota property nastavena.
            </summary>
        </member>
        <member name="T:Havit.Business.Conditions.ComparisonOperatorHelper">
            <summary>
            Pomocník pro práci s výčtem ComparisonOperator.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.ComparisonOperatorHelper.GetOperatorText(Havit.Business.Conditions.ComparisonOperator)">
            <summary>
            Převede comparison operátor na řetězec, např. Equals na "=", NotEquals na "&lt;&gt;", apod.
            </summary>
        </member>
        <member name="T:Havit.Business.DateInfoDictionary">
            <summary>
            Dictionary pro klíč <see cref="T:System.DateTime"/> a hodnoty <see cref="T:Havit.Business.DateInfo"/>.
            </summary>
        </member>
        <member name="M:Havit.Business.DateInfoDictionary.#ctor">
            <summary>
            Vytvoří prázdnou instanci <see cref="T:Havit.Business.DateInfoDictionary"/>
            </summary>
        </member>
        <member name="M:Havit.Business.DateInfoDictionary.Add(Havit.Business.DateInfo)">
            <summary>
            Přidá <see cref="T:Havit.Business.DateInfo"/> do slovníku.<br/>
            Klíčem je <see cref="P:Havit.Business.DateInfo.Date"/>.
            </summary>
            <param name="value">Prvek, který má být přidán do slovníku.</param>
        </member>
        <member name="M:Havit.Business.DateInfoDictionary.Contains(System.DateTime)">
            <summary>
            Zjistí, zda-li je ve slovníku požadovaný den.
            </summary>
            <param name="key">zjišťovaný den</param>
        </member>
        <member name="P:Havit.Business.DateInfoDictionary.Item(System.DateTime)">
            <summary>
            Indexer přes klíče <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="T:Havit.Business.Conditions.OrCondition">
            <summary>
            Kompozitní podmínka. Výsledek je pravdivý, je-li pravdivá alespoň jedna členská podmínka.
            </summary>
        </member>
        <member name="T:Havit.Business.Conditions.CompositeCondition">
            <summary>
            Předek kompozitních podmínek.
            </summary>
        </member>
        <member name="T:Havit.Business.Conditions.ICondition">
            <summary>
            Interface podmínky dotazu.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.ICondition.GetWhereStatement(System.Data.Common.DbCommand,System.Text.StringBuilder)">
            <summary>
            Přidá část SQL příkaz pro sekci WHERE. Je VELMI doporučeno, aby byla podmínka přidána včetně závorek.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.CompositeCondition.#ctor(System.String,Havit.Business.Conditions.ICondition[])">
            <summary>
            Vytvoří instanci.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.CompositeCondition.GetWhereStatement(System.Data.Common.DbCommand,System.Text.StringBuilder)">
            <summary>
            Poskládá členské podmínky. Mezi podmínkami (operandy) je operátor zadaný v konstruktoru.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.OrCondition.#ctor(Havit.Business.Conditions.ICondition[])">
            <summary>
            Vytvoří kompozitní podmínku. Lze inicializovat sadou členských podmínek.
            </summary>		
        </member>
        <member name="T:Havit.Business.BusinessObjectBase">
            <summary>
            Bázová třída pro všechny business-objekty, která definuje jejich základní chování, zejména ve vztahu k databázi (Layer Supertype).
            </summary>
            <remarks>
            Třída je základem pro všechny business-objekty a implementuje základní pattern pro komunikaci s perzistentními uložišti.
            Načítání je implementováno jako lazy-load, kdy je objekt nejprve vytvořen prázdný jako ghost se svým ID a teprve
            při první potřebě je iniciováno jeho úplné načtení.<br/>
            </remarks>
        </member>
        <member name="F:Havit.Business.BusinessObjectBase.NoID">
            <summary>
            Hodnota, kterou má ID objektu neuloženého v databázi (bez perzistence).
            </summary>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.#ctor">
            <summary>
            Konstruktor pro nový objekt (bez perzistence v databázi).
            </summary>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.#ctor(System.Int32)">
            <summary>
            Konstruktor pro objekt s obrazem v databázi (perzistentní).
            </summary>
            <param name="id">primární klíč objektu</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Load(System.Data.Common.DbTransaction)">
            <summary>
            Nahraje objekt z perzistentního uložiště, bez transakce.
            </summary>
            <remarks>
            Pozor, pokud je již objekt načten a není určena transakce (null), znovu se nenahrává.
            Pokud je transakce určena, načte se znovu.
            </remarks>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt načten; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Load">
            <summary>
            Nahraje objekt z perzistentního uložiště, bez transakce.
            </summary>
            <remarks>
            Pozor, pokud je již objekt načten, znovu se nenahrává.
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Load_Perform(System.Data.Common.DbTransaction)">
            <summary>
            Výkonná část nahrání objektu z perzistentního uložiště.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt načten; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Save(System.Data.Common.DbTransaction)">
            <summary>
            Uloží objekt do databáze, s případným použitím VNĚJŠÍ transakce.
            </summary>
            <remarks>
            Metoda neprovede uložení objektu, pokud není nahrán (!IsLoaded), není totiž ani co ukládat,
            data nemohla být změněna, když nebyla ani jednou použita.<br/>
            Metoda také neprovede uložení, pokud objekt nebyl změněn a současně nejde o nový objekt (!IsDirty &amp;&amp; !IsNew).<br/>
            Metoda nezakládá vlastní transakci, která by sdružovala uložení kolekcí, členských objektů a vlastních dat!!!
            Příslušná transakce musí být předána (explicitní transakci doplňuje až ActiveRecordBusinessObjectbase).<br/>
            </remarks>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt uložen; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Save">
            <summary>
            Uloží objekt do databáze, bez transakce. Nový objekt je vložen INSERT, existující objekt je aktualizován UPDATE.
            </summary>
            <remarks>
            Metoda neprovede uložení objektu, pokud není nahrán (!IsLoaded), není totiž ani co ukládat,
            data nemohla být změněna, když nebyla ani jednou použita.<br/>
            Metoda také neprovede uložení, pokud objekt nebyl změněn a současně nejde o nový objekt (!IsDirty &amp;&amp; !IsNew)
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Save_Perform(System.Data.Common.DbTransaction)">
            <summary>
            Výkonná část uložení objektu do perzistentního uložiště.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt uložen; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Save_SaveMembers(System.Data.Common.DbTransaction)">
            <summary>
            Ukládá member-objekty.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které mají být member-objekty uloženy; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Save_SaveCollections(System.Data.Common.DbTransaction)">
            <summary>
            Ukládá member-kolekce objektu.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které mají být member-kolekce uloženy; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Delete(System.Data.Common.DbTransaction)">
            <summary>
            Smaže objekt, nebo ho označí jako smazaný, podle zvolené logiky. Změnu uloží do databáze, v transakci.
            </summary>
            <remarks>
            Neprovede se, pokud je již objekt smazán.
            </remarks>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které se smazání provede; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Delete">
            <summary>
            Smaže objekt, nebo ho označí jako smazaný, podle zvolené logiky. Změnu uloží do databáze, bez transakce.
            </summary>
            <remarks>
            Neprovede se, pokud je již objekt smazán.
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Delete_Perform(System.Data.Common.DbTransaction)">
            <summary>
            Implementace metody vymaže objekt z perzistentního uložiště nebo ho označí jako smazaný.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které se smazání provede; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.EnsureLoaded">
            <summary>
            Ověří, jestli jsou data objektu načtena z databáze (IsLoaded). Pokud nejsou, provede jejich načtení.
            </summary>
            <remarks>
            Metoda EnsureLoaded se volá před každou operací, která potřebuje data objektu. Zajištuje lazy-load.
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.CheckChange(System.Object,System.Object)">
            <summary>
            Metoda zkontroluje rovnost dvou objektů - jestliže nejsou stejné, je objekt označen jako změněný (IsDirty = true).
            </summary>
            <remarks>
            Metoda se používá zejména v set-accesorech properties, kde hlídá, jestli dochází ke změně,
            kterou bude potřeba uložit.
            </remarks>
            <param name="currentValue">dosavadní hodnota</param>
            <param name="newValue">nová hodnota</param>
            <returns>false, pokud jsou hodnoty stejné; true, pokud dochází ke změně</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Equals(Havit.Business.BusinessObjectBase)">
            <summary>
            Zjistí rovnost druhého objektu s instancí. Základní implementace porovná jejich ID.
            </summary>
            <param name="obj">objekt k porovnání</param>
            <returns>true, pokud jsou si rovny; jinak false</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Equals(System.Object)">
            <summary>
            Zjistí rovnost druhého objektu s instancí. Základní implementace porovná jejich ID.
            </summary>
            <param name="obj">objekt k porovnání</param>
            <returns>true, pokud jsou si rovny; jinak false</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.op_Equality(Havit.Business.BusinessObjectBase,Havit.Business.BusinessObjectBase)">
            <summary>
            Operátor ==, ověřuje rovnost ID.
            </summary>
            <param name="objA">první objekt</param>
            <param name="objB">druhý objekt</param>
            <returns>true, pokud mají objekty stejné ID; jinak false</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.op_Inequality(Havit.Business.BusinessObjectBase,Havit.Business.BusinessObjectBase)">
            <summary>
            Operátor !=, ověřuje rovnost ID.
            </summary>
            <param name="objA">první objekt</param>
            <param name="objB">druhý objekt</param>
            <returns>false, pokud mají objekty stejné ID; jinak true</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.GetHashCode">
            <summary>
            Vrací ID jako HashCode.
            </summary>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.CheckConstraints">
            <summary>
            Kontroluje konzistenci objektu jako celku.
            </summary>
            <remarks>
            Automaticky je voláno před ukládáním objektu Save(), pokud je objekt opravdu ukládán.
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.Init">
            <summary>
            Inicializační metoda, která je volána při vytvoření objektu (přímo z konstruktorů).
            Připravena pro override potomky.
            </summary>
            <remarks>
            Metoda Init() je zamýšlena mj. pro incializaci PropertyHolderů (vytvoření instance) a kolekcí (vytvoření instance, navázání událostí).
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessObjectBase.RegisterPropertyHolder(Havit.Business.PropertyHolderBase)">
            <summary>
            Zaregistruje PropertyHolder do kolekce PropertyHolders.
            </summary>
            <remarks>
            Touto metodou se k objektu registrují sami PropertyHoldery ve svých constructorech.
            </remarks>
            <param name="propertyHolder">PropertyHolder k zaregistrování</param>
        </member>
        <member name="P:Havit.Business.BusinessObjectBase.ID">
            <summary>
            Primární klíč objektu.
            </summary>
        </member>
        <member name="P:Havit.Business.BusinessObjectBase.IsDirty">
            <summary>
            Indikuje, zda-li byla data objektu změněna oproti datům v databázi.
            Při nastavení na false zruší příznak změn všem PropertyHolderům.
            </summary>
        </member>
        <member name="P:Havit.Business.BusinessObjectBase.IsLoaded">
            <summary>
            Indikuje, zda-li byla data objektu načtena z databáze,
            resp. zda-li je potřeba objekt nahrávat z databáze.
            </summary>
        </member>
        <member name="P:Havit.Business.BusinessObjectBase.IsNew">
            <summary>
            Indikuje, zda-li jde o nový objekt bez perzistence, který nebyl dosud uložen do databáze.
            Čeká na INSERT.
            </summary>
        </member>
        <member name="P:Havit.Business.BusinessObjectBase.IsDeleted">
            <summary>
            Indikuje, zda-li je objekt smazán z databáze, případně je v ní označen jako smazaný.
            </summary>
        </member>
        <member name="P:Havit.Business.BusinessObjectBase.PropertyHolders">
            <summary>
            Kolekce referencí na jednotlivé property-holder objekty.
            </summary>
            <remarks>
            Kolekce je určena pro hromadné operace s property-holdery. Jednotlivé property si reference na své property-holdery udržují v private fieldu.
            </remarks>
        </member>
        <member name="T:Havit.Business.IProperty">
            <summary>
            Interface pro Property popisující strukturu domény.	
            </summary>
        </member>
        <member name="M:Havit.Business.IProperty.GetSelectFieldStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí řetězec pro vytažení daného sloupce z databáze.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.TextCondition.GetLikeExpression(System.String)">
            <summary>
            Transformuje řetězec nařetězec, který je možné použít jako hodnota k operátoru like.
            Nahrazuje % na [%] a _ na [_].
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.TextCondition.GetWildCardsLikeExpression(System.String)">
            <summary>
            Transformuje řetězec nařetězec, který je možné použít jako hodnota k operátoru like. 
            Navíc je vzat ohled na hvězdičkovou konvenci.
            Nahrazuje % na [%] a _ na [_] a jako poslední zamění * za %.
            Příklad "*text1%text2*text3" bude transformováno na "%text1[%]text2%text3".
            </summary>
        </member>
        <member name="T:Havit.Business.Conditions.ComparisonOperator">
            <summary>
            Operátor pro porovnání hodnot.
            </summary>
        </member>
        <member name="T:Havit.Business.QueryParams">
            <summary>
            Objektová struktura SQL dotazu.
            Obsahuje seznam properties, které se mají z databáze získat, seznam podmínek fitrující záznamy
            a řazení v jakém se mají záznamy (objekty) získat.
            </summary>
        </member>
        <member name="M:Havit.Business.QueryParams.PrepareCommand(System.Data.Common.DbCommand)">
            <summary>
            Vytvoří dotaz, nastaví jej do commandu.
            Přidá parametry.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Havit.Business.QueryParams.GetSelectStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí sekci SQL dotazu SELECT.
            </summary>
        </member>
        <member name="M:Havit.Business.QueryParams.GetSelectFieldsStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí seznam sloupců, které se z databáze získávají.
            </summary>
        </member>
        <member name="M:Havit.Business.QueryParams.GetFromStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí sekci SQL dotazu FROM.
            </summary>
        </member>
        <member name="M:Havit.Business.QueryParams.GetWhereStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí sekci SQL dotazu WHERE.
            </summary>
        </member>
        <member name="M:Havit.Business.QueryParams.GetOrderByStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí sekci SQL dotazu ORDER BY.
            </summary>
        </member>
        <member name="P:Havit.Business.QueryParams.TopRecords">
            <summary>
            Maximální počet záznamů, který se vrací z databáze - (SELECT TOP n ...).
            </summary>
        </member>
        <member name="P:Havit.Business.QueryParams.TableName">
            <summary>
            Název tabulky nebo view, do které se tvoří dotaz (FROM xxx).
            </summary>
        </member>
        <member name="P:Havit.Business.QueryParams.FieldsWhenEmpty">
            <summary>
            Seznam sloupců (sekce SQL dotazu SELECT), které se vytáhnou v případě, že kolekce fields je prázdná.
            </summary>
        </member>
        <member name="P:Havit.Business.QueryParams.Properties">
            <summary>
            Seznam sloupců, které jsou výsledkem dotazu (SELECT sloupec1, sloupec2...).
            </summary>
        </member>
        <member name="P:Havit.Business.QueryParams.Conditions">
            <summary>
            Podmínky dotazu (WHERE ...).
            </summary>
        </member>
        <member name="P:Havit.Business.QueryParams.OrderBy">
            <summary>
            Pořadí záznamů (ORDER BY ...).
            </summary>
        </member>
        <member name="T:Havit.Business.Property">
            <summary>
            Reprezentuje sloupec v databázi,
            nese informace o daném sloupci a jeho vazbu na objektovou strukturu.
            </summary>
        </member>
        <member name="M:Havit.Business.Property.#ctor(System.String,System.Boolean,System.Data.SqlDbType,System.Boolean)">
            <summary>
            Vytvoří instanci sloupce.
            </summary>
            <param name="fieldName"></param>
            <param name="nullable"></param>
            <param name="fieldType"></param>
        </member>
        <member name="M:Havit.Business.Property.GetSelectFieldStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí řetězec pro vytažení daného sloupce z databáze.
            </summary>
        </member>
        <member name="P:Havit.Business.Property.FieldName">
            <summary>
            Název sloupce v databázi.
            </summary>
        </member>
        <member name="P:Havit.Business.Property.Nullable">
            <summary>
            Udává, zda je možné uložit null hodnotu.
            </summary>
        </member>
        <member name="P:Havit.Business.Property.FieldType">
            <summary>
            Typ sloupce v databázi.
            </summary>
        </member>
        <member name="P:Havit.Business.Property.IsPrimaryKey">
            <summary>
            Udává, zda je sloupec primárním klíčem.
            </summary>
        </member>
        <member name="T:Havit.Business.ConstraintViolationException">
            <summary>
            Výjimka reprezentující porušení business pravidla.
            </summary>
        </member>
        <member name="M:Havit.Business.ConstraintViolationException.#ctor(Havit.Business.BusinessObjectBase,System.String)">
            <summary>
            Vytvoří instanci výjimky.
            </summary>
            <param name="businessObject">Business object, ve kterém došlo k porušení pravidla.</param>
            <param name="message">Popis výjimky.</param>
        </member>
        <member name="M:Havit.Business.ConstraintViolationException.#ctor(Havit.Business.BusinessObjectBase,System.String,System.Exception)">
            <summary>
            Vytvoří instanci výjimky.
            </summary>
            <param name="businessObject">Business object, ve kterém došlo k porušení pravidla.</param>
            <param name="message">Popis výjimky.</param>
            <param name="innerException">Vnořená výjimka.</param>
        </member>
        <member name="P:Havit.Business.ConstraintViolationException.BusinessObject">
            <summary>
            BusinessObject, ve kterém došlo k porušení pravidla.
            </summary>
        </member>
        <member name="T:Havit.Business.OrderItemCollection">
            <summary>
            Kolekce objektů třídy OrderItem.
            </summary>
        </member>
        <member name="T:Havit.Business.PropertyHolder`1">
            <summary>
            Třída pro objekt, který nese hodnotu a vlastnosti jednotlivé property BusinessObjectu.
            </summary>
            <typeparam name="T">typ property, jíž je PropertyHolder nosičem</typeparam>
        </member>
        <member name="M:Havit.Business.PropertyHolder`1.#ctor(Havit.Business.BusinessObjectBase)">
            <summary>
            Založí instanci PropertyHolderu.
            </summary>
            <param name="owner">objekt, kterému PropertyHolder patří</param>
        </member>
        <member name="P:Havit.Business.PropertyHolder`1.Value">
            <summary>
            Hodnota, kterou PropertyHolder nese.
            </summary>
        </member>
        <member name="T:Havit.Business.DateInfo">
            <summary>
            Třída pro informace o dni.
            </summary>
        </member>
        <member name="M:Havit.Business.DateInfo.#ctor(System.DateTime)">
            <summary>
            Vytvoří instanci <see cref="T:Havit.Business.DateInfo"/>.
            </summary>
            <param name="date">den, který má být reprezentován</param>
        </member>
        <member name="M:Havit.Business.DateInfo.SetAsHoliday(System.String)">
            <summary>
            Nastaví den jako svátek.
            </summary>
            <param name="holidayDescription">textový popis svátku</param>
        </member>
        <member name="M:Havit.Business.DateInfo.SetAsHoliday">
            <summary>
            Nastaví den jako svátek.
            </summary>
        </member>
        <member name="P:Havit.Business.DateInfo.Date">
            <summary>
            Vrátí den, kterému DateInfo patří.
            </summary>
        </member>
        <member name="P:Havit.Business.DateInfo.IsHoliday">
            <summary>
            Indikuje, zda-li je den svátkem.
            </summary>
        </member>
        <member name="P:Havit.Business.DateInfo.HolidayDescription">
            <summary>
            Textový popis svátku, pokud je den svátkem.
            </summary>
        </member>
        <member name="T:Havit.Business.CollectionProperty">
            <summary>
            Kolekce objektů třídy IProperty.
            </summary>
        </member>
        <member name="M:Havit.Business.CollectionProperty.#ctor(System.Type,System.String)">
            <summary>
            Vytvoří instanci CollectionProperty.
            </summary>
            <param name="itemType">Typ prvků kolekce.</param>
            <param name="collectionSelectFieldStatement">Část SQL dotazu pro vytažení hodnoty daného sloupce.</param>
        </member>
        <member name="M:Havit.Business.CollectionProperty.GetSelectFieldStatement(System.Data.Common.DbCommand)">
            <summary>
            Vrátí řetězec pro vytažení daného sloupce z databáze.
            </summary>
        </member>
        <member name="P:Havit.Business.CollectionProperty.ItemType">
            <summary>
            Typ prvků kolekce.
            </summary>
        </member>
        <member name="P:Havit.Business.CollectionProperty.CollectionSelectFieldStatement">
            <summary>
            Část SQL dotazu pro vytažení hodnoty daného sloupce.
            </summary>
        </member>
        <member name="T:Havit.Business.OrderItem">
            <summary>
            Reprezentuje položku řazení.
            </summary>
        </member>
        <member name="M:Havit.Business.OrderItem.#ctor">
            <summary>
            Vytvoří prázdnou instanci pořadí.
            </summary>
        </member>
        <member name="M:Havit.Business.OrderItem.#ctor(System.String)">
            <summary>
            Vytvoří položdu řazení podle fieldName, vzestupné řazení.
            </summary>
        </member>
        <member name="M:Havit.Business.OrderItem.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Vytvoří položdu řazení podle fieldName a daného pořadí.
            </summary>
        </member>
        <member name="M:Havit.Business.OrderItem.#ctor(Havit.Business.Property)">
            <summary>
            Vytvoří položdu řazení podle sloupce, vzestupné pořadí.
            </summary>
        </member>
        <member name="M:Havit.Business.OrderItem.#ctor(Havit.Business.Property,System.ComponentModel.ListSortDirection)">
            <summary>
            Vytvoří položdu řazení podle sloupce a daného pořadí.
            </summary>
        </member>
        <member name="M:Havit.Business.OrderItem.GetSqlOrderBy">
            <summary>
            Vrátí výraz pro řazení.
            </summary>
        </member>
        <member name="P:Havit.Business.OrderItem.FieldName">
            <summary>
            Název sloupce, dle kterého se řadí.
            </summary>
        </member>
        <member name="P:Havit.Business.OrderItem.Direction">
            <summary>
            Směr řazení.
            </summary>
        </member>
        <member name="T:Havit.Business.CollectionPropertyHolder`2">
            <summary>
            Třída pro objekt, který nese kolekci property BusinessObjectu.
            </summary>
            <typeparam name="CollectionType">typ kolekce, jíž je CollectionPropertyHolder nosičem</typeparam>
            <typeparam name="BusinessObjectType">typ prvku kolekce</typeparam>
        </member>
        <member name="M:Havit.Business.CollectionPropertyHolder`2.#ctor(Havit.Business.BusinessObjectBase)">
            <summary>
            Založí instanci CollectionPropertyHolderu.
            </summary>
            <param name="owner">objekt, kterému CollectionPropertyHolder patří</param>
        </member>
        <member name="M:Havit.Business.CollectionPropertyHolder`2.Initialize">
            <summary>
            Inicializuje obsaženou kolekci.
            </summary>
        </member>
        <member name="P:Havit.Business.CollectionPropertyHolder`2.Value">
            <summary>
            Hodnota, kterou CollectionPropertyHolder nese.
            </summary>
        </member>
        <member name="T:Havit.Business.BusinessObjectCollection`1">
            <summary>
            Bázová třída pro všechny kolekce BusinessObjectBase (Layer SuperType)
            </summary>
            <remarks>
            POZOR! Vnitřní implementace je závislá na faktu, že this.Items je List(Of T).
            To je výchozí chování Collection(Of T), ale pro jistotu si to ještě vynucujeme
            použitím wrappujícího constructoru.
            </remarks>
            <typeparam name="T">členský typ kolekce</typeparam>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.OnCollectionChanged(System.EventArgs)">
            <summary>
            Provádí se jako volání události <see cref="E:Havit.Business.BusinessObjectCollection`1.CollectionChanged"/>.
            </summary>
            <param name="e">prázdné</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or-index is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"></see>.</exception>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"></see>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or-index is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"></see>.</exception>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or-index is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"></see>.</exception>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"></see>.
            </summary>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.#ctor">
            <summary>
            Vytvoří novou instanci kolekce bez prvků - prázdnou.
            </summary>
            <remarks>
            Použit je wrappující constructor Collection(Of T), abychom si vynutili List(Of T).
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Vytvoří novou instanci kolekce wrapnutím Listu prvků (neklonuje!).
            </summary>
            <remarks>
            Je to rychlé! Nikam se nic nekopíruje, ale pozor, ani neklonuje!
            </remarks>
            <param name="list">List prvků</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.FindByID(System.Int32)">
            <summary>
            Prohledá kolekci a vrátí první nalezený prvek s požadovaným ID.
            </summary>
            <remarks>
            Vzhledem k tomu, že jsou prvky v kolekci obvykle unikátní, najde prostě zadané ID.
            </remarks>
            <param name="id">ID prvku</param>
            <returns>první nalezený prvek s požadovaným ID; null, pokud nic nenalezeno</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.Find(System.Predicate{`0})">
            <summary>
            Prohledá kolekci a vrátí první nalezený prvek odpovídající kritériu match.
            </summary>
            <remarks>
            Metoda pouze publikuje metodu Find() inner-Listu Items.
            </remarks>
            <param name="match">kritérium ve formě predikátu</param>
            <returns>kolekce všech prvků odpovídajících kritériu match</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.FindAll(System.Predicate{`0})">
            <summary>
            Prohledá kolekci a vrátí všechny prvky odpovídající kritériu match.
            </summary>
            <remarks>
            Metoda pouze publikuje metodu FindAll() inner-listu Items.
            </remarks>
            <param name="match">kritérium ve formě predikátu</param>
            <returns>kolekce všech prvků odpovídajících kritériu match</returns>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.ForEach(System.Action{`0})">
            <summary>
            Spustí akci nad všemi prvky kolekce.
            </summary>
            <example>
            orders.ForEach(delegate(Order item)
            	{
            		item.Delete();
            	});
            </example>
            <remarks>
            Je rychlejší, než <c>foreach</c>, protože neprochází enumerator, ale iteruje prvky ve for cyklu podle indexu.
            </remarks>
            <param name="action">akce, která má být spuštěna</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.Sort(System.String,System.Boolean)">
            <summary>
            Seřadí prvky kolekce dle požadované property, která implementuje IComparable.
            </summary>
            <remarks>
            Používá <see cref="T:Havit.Collections.GenericPropertyComparer`1"/>. K porovnávání podle property
            tedy dochází pomocí reflexe - relativně pomalu. Pokud je potřeba vyšší výkon, je potřeba použít
            overload Sort(Generic Comparsion) s přímým přístupem k property.
            </remarks>
            <param name="propertyName">property, podle které se má řadit</param>
            <param name="ascending">true, pokud se má řadit vzestupně, false, pokud sestupně</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Seřadí prvky kolekce dle zadaného srovnání. Publikuje metodu Sort(Generic Comparsion) inner-Listu.
            </summary>
            <param name="comparsion">srovnání, podle kterého mají být prvky seřazeny</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.SaveAll(System.Data.Common.DbTransaction)">
            <summary>
            Uloží všechny prvky kolekce, v transakci.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v které mají být prvky uloženy</param>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.SaveAll">
            <summary>
            Uloží všechny prvky kolekce, bez transakce.
            </summary>
        </member>
        <member name="M:Havit.Business.BusinessObjectCollection`1.GetIDs">
            <summary>
            Vrátí pole hodnot ID všech prvků kolekce.
            </summary>
            <returns>pole hodnot ID všech prvků kolekce</returns>
        </member>
        <member name="E:Havit.Business.BusinessObjectCollection`1.CollectionChanged">
            <summary>
            Událost vyvolaná po jakékoliv změně kolekce (Insert, Remove, Set, Clear).
            </summary>
        </member>
        <member name="T:Havit.Business.Conditions.BinaryCondition">
            <summary>
            Třída reprezentující podmínku o dvou operandech.
            </summary>
        </member>
        <member name="F:Havit.Business.Conditions.BinaryCondition.LikePattern">
            <summary>
            Vzor pro podmínku LIKE
            </summary>
        </member>
        <member name="F:Havit.Business.Conditions.BinaryCondition.EqualsPattern">
            <summary>
            Vzor pro podmínku rovnosti.
            </summary>
        </member>
        <member name="F:Havit.Business.Conditions.BinaryCondition.Operand2">
            <summary>
            Druhý operand.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.BinaryCondition.#ctor(System.String,Havit.Business.Conditions.IOperand,Havit.Business.Conditions.IOperand)">
            <summary>
            Vytvoří binární (dvojoperandovou) podmínku.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.BinaryCondition.#ctor(Havit.Business.Conditions.IOperand,System.String,Havit.Business.Conditions.IOperand)">
            <summary>
            Vytvoří binární (dvojoperandovou) podmínku.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.BinaryCondition.GetComparisonPattern(Havit.Business.Conditions.ComparisonOperator)">
            <summary>
            Vrátí vzor podmínky pro běžné porovnání dvou hodnot (vrací např. "({0} = {1})").
            </summary>
        </member>
        <member name="T:Havit.Business.PropertyCollection">
            <summary>
            Kolekce objektů implementujících IProperty.
            Při opakovaném přidání property do kolekce se nic nestane (tj. 
            property nebude do kolekce přidána podruhé a nedojde k chybě).
            </summary>
        </member>
        <member name="M:Havit.Business.PropertyCollection.InsertItem(System.Int32,Havit.Business.IProperty)">
            <summary>
            Přidá prvek do kolekce, pokud v kolekci již není.
            </summary>
        </member>
        <member name="T:Havit.Business.BusinessCalendar">
            <summary>
            Třída poskytující funkčnost pro práci s pracovním kalendářem,
            pracovními dny, svátky, atp.
            </summary>
            <remarks>
            Pracovním dnem (business day) je den, který není sobotou, nedělí ani svátkem.<br/>
            Třída se instancializuje se sadou svátků (holidays), nebo bez svátků (pracovním
            dnem je pak den, který není sobotou ani nedělí).<br/>
            Jako svátky (holiday) lze samozřejmě předat i různé dovolené apod.<br/>
            <br/>
            Jednou vytvořenou instanci třídy lze s výhodou cachovat.
            </remarks>
        </member>
        <member name="F:Havit.Business.BusinessCalendar.holidayDictionary">
            <summary>
            Interní dictionary svátků.<br/>
            Klíč je DateTime, hodnota je DateInfo.
            </summary>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.#ctor">
            <summary>
            Vytvoří instanci <see cref="T:Havit.Business.BusinessCalendar"/> bez svátků.<br/>
            Pracovními dny budou všechny dny mimo víkendů, dokud nebudou přidány nějaké svátky.
            </summary>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.#ctor(Havit.Business.DateInfoDictionary)">
            <summary>
            Vytvoří instanci <see cref="T:Havit.Business.BusinessCalendar"/> se svátky.<br/>
            </summary>
            <param name="holidayDictionary"><see cref="T:Havit.Business.DateInfoDictionary"/> se svátky (POUZE SE SVÁTKY!!!)</param>
            <remarks>
            Nekontroluje se, jestli mají všechny dny z holidayDictionary nastaveno <see cref="P:Havit.Business.DateInfo.IsHoliday"/>.
            </remarks>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.#ctor(System.DateTime[])">
            <summary>
            Vytvoří instanci <see cref="T:Havit.Business.BusinessCalendar"/> se svátky.<br/>
            Svátky jsou předány v poli <see cref="T:System.DateTime"/>.
            </summary>
            <param name="holidays">pole svátků <see cref="T:System.DateTime"/></param>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.GetNextBusinessDay(System.DateTime)">
            <summary>
            Určí následující pracovní den.
            </summary>
            <param name="time"><see cref="T:System.DateTime"/>, ke kterému má být následující pracovní den určen.</param>
            <returns><see cref="T:System.DateTime"/>, který je následujícím pracovním dnem.</returns>
            <remarks>Časový údaj zůstane nedotčen.</remarks>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.GetPreviousBusinessDay(System.DateTime)">
            <summary>
            Určí předchozí pracovní den.
            </summary>
            <param name="time"><see cref="T:System.DateTime"/>, ke kterému má být předchozí pracovní den určen.</param>
            <returns><see cref="T:System.DateTime"/>, který je předchozím pracovním dnem.</returns>
            <remarks>Časový údaj zůstane nedotčen.</remarks>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.AddBusinessDays(System.DateTime,System.Int32)">
            <summary>
            Určí den, který je x-tým následujícím pracovním dnem po dni zadaném.
            </summary>
            <param name="time"><see cref="T:System.DateTime"/>, od kterého se určovaný den odvíjí.</param>
            <param name="businessDays">kolikátý pracovní den má být určen</param>
            <returns><see cref="T:System.DateTime"/>, který je x-tým následujícím pracovním dnem po dni zadaném.</returns>
            <remarks>Časový údaj zůstane nedotčen.</remarks>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.IsBusinessDay(System.DateTime)">
            <summary>
            Určí, zda-li je zadaný den dnem pracovním.
            </summary>
            <param name="time"><see cref="T:System.DateTime"/>, u kterého chceme vlastnosti zjistit</param>
            <returns><b>false</b>, pokud je <see cref="T:System.DateTime"/> víkendem nebo svátkem; jinak <b>true</b></returns>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.IsHoliday(System.DateTime)">
            <summary>
            Zjistí, zda-li je <see cref="T:System.DateTime"/> svátkem (dovolenou, ...).
            </summary>
            <param name="time"><see cref="T:System.DateTime"/>, u kterého má být vlastnost zjištěna</param>
            <returns><b>true</b>, pokud je den v seznamu svátků, s nimiž byl <see cref="T:Havit.Business.BusinessCalendar"/> instanciován; jinak <b>false</b></returns>
        </member>
        <member name="M:Havit.Business.BusinessCalendar.IsWeekend(System.DateTime)">
            <summary>
            Určí, zda-li je zadaný den sobotou nebo nedělí.
            </summary>
            <param name="time"><see cref="T:System.DateTime"/>, u kterého určujeme</param>
            <returns><b>true</b>, pokud je zadaný <see cref="T:System.DateTime"/> sobota nebo neděle; jinak <b>false</b></returns>
        </member>
        <member name="T:Havit.Business.Conditions.AndCondition">
            <summary>
            Kompozitní podmínka. Výsledek je pravdivý, jsou-li pravdivé všechny členské podmínky.
            </summary>
        </member>
        <member name="M:Havit.Business.Conditions.AndCondition.#ctor(Havit.Business.Conditions.ICondition[])">
            <summary>
            Vytvoří kompozitní podmínku. Lze inicializovat sadou členských podmínek.
            </summary>		
        </member>
        <member name="T:Havit.Business.ActiveRecordBusinessObjectBase">
            <summary>
            Bázová třída pro všechny business-objekty, která definuje jejich základní chování (Layer Supertype),
            zejména ve vztahu k databázi jako Active Record [Fowler].
            </summary>
            <remarks>
            Třída je základem pro všechny business-objekty a implementuje základní pattern pro komunikaci s databází.
            Načítání z databáze je implementováno jako Lazy Load, kdy je objekt nejprve vytvořen prázdný jako Ghost se svým ID a teprve
            při první potřebě je iniciováno jeho úplné načtení z DB.<br/>
            Prostřednictvím constructoru BusinessObjectBase(DataRecord record) lze vytvořit i neúplně načtenou instanci objektu,
            samotná funkčnost však není řešena a každý si musí sám ohlídat, aby bylo načteno vše, co je potřeba.
            </remarks>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.#ctor">
            <summary>
            Konstruktor pro nový objekt (bez perzistence v databázi).
            </summary>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.#ctor(System.Int32)">
            <summary>
            Konstruktor pro objekt s obrazem v databázi (perzistentní).
            </summary>
            <param name="id">primární klíč objektu</param>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.#ctor(Havit.Data.DataRecord)">
            <summary>
            Konstruktor pro objekt s obrazen v databázi, kterým dojde rovnou k načtení dat z <see cref="T:Havit.Data.DataRecord"/>.
            Základní cesta vytvoření partially-loaded instance.
            </summary>
            <param name="record"><see cref="T:Havit.Data.DataRecord"/> s daty objektu načtenými z databáze</param>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.Load_Perform(System.Data.Common.DbTransaction)">
            <summary>
            Výkonná část nahrání objektu z perzistentního uložiště.
            </summary>
            <remarks>
            Načte objekt z databáze do <see cref="T:Havit.Data.DataRecord"/> a parsuje získaný <see cref="T:Havit.Data.DataRecord"/> do objektu.
            </remarks>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt načten; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.Load_GetDataRecord(System.Data.Common.DbTransaction)">
            <summary>
            Implementace metody načte DataRecord objektu z databáze.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt načten; null, pokud bez transakce</param>
            <returns><see cref="T:Havit.Data.DataRecord"/> s daty objektu načtenými z databáze; null, pokud nenalezeno</returns>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.Load_ParseDataRecord(Havit.Data.DataRecord)">
            <summary>
            Implemetace metody naplní hodnoty objektu z DataRecordu.
            </summary>
            <param name="record"><see cref="T:Havit.Data.DataRecord"/> s daty objektu načtenými z databáze; null, pokud nenalezeno</param>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.Save(System.Data.Common.DbTransaction)">
            <summary>
            Uloží objekt do databáze, s použitím transakce. Nový objekt je vložen INSERT, existující objekt je aktualizován UPDATE.
            </summary>
            <remarks>
            Metoda neprovede uložení objektu, pokud není nahrán (!IsLoaded), není totiž ani co ukládat,
            data nemohla být změněna, když nebyla ani jednou použita.<br/>
            Metoda také neprovede uložení, pokud objekt nebyl změněn a současně nejde o nový objekt (!IsDirty &amp;&amp; !IsNew)
            </remarks>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt uložen; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.Save_Perform(System.Data.Common.DbTransaction)">
            <summary>
            Výkonná část uložení objektu do perzistentního uložiště.
            </summary>
            <remarks>
            Pokud je objekt nový, volá Insert, jinak Update.
            </remarks>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt uložen; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.Save_Insert(System.Data.Common.DbTransaction)">
            <summary>
            Implementace metody vloží nový objekt do databáze a nastaví nově přidělené ID (primární klíč).
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt uložen; null, pokud bez transakce</param>
        </member>
        <member name="M:Havit.Business.ActiveRecordBusinessObjectBase.Save_Update(System.Data.Common.DbTransaction)">
            <summary>
            Implementace metody aktualizuje data objektu v databázi.
            </summary>
            <param name="transaction">transakce <see cref="T:System.Data.Common.DbTransaction"/>, v rámci které má být objekt uložen; null, pokud bez transakce</param>
        </member>
        <member name="P:Havit.Business.ActiveRecordBusinessObjectBase.IsLoadedPartially">
            <summary>
            Indikuje, zda-li byla data objektu načtena z databáze částečně, tedy zda-li se jednalo o partial-load.
            </summary>
        </member>
    </members>
</doc>
