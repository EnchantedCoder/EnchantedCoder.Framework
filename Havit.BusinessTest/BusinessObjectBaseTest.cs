// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Havit.BusinessLayerTest;
using Havit.Data;
using System.Data.Common;
using Havit.Business;

namespace Havit.BusinessTest
{
	/// <summary>
	/// This is a test class for Havit.Business.BusinessObjectBase and is intended
	/// to contain all Havit.Business.BusinessObjectBase Unit Tests
	/// </summary>
	[TestClass]
	public class BusinessObjectBaseTest : BusinessObjectBase // abychom došáhli na protected members
	{
		#region EqualsTest_StejneID
		/// <summary>
		/// Základní test na funkčnost Equals při stejných ID.
		/// </summary>
		[TestMethod]
		public void EqualsTest_StejneID()
		{
			using (new IdentityMapScope())
			{
				Role role1 = Role.GetObject(-1);
				Role role2 = Role.GetObject(-1);

				Assert.IsTrue(role1.Equals(role2));
				Assert.IsTrue(role2.Equals(role1));
				Assert.IsTrue(role1 == role2);
				Assert.IsTrue(role2 == role1);
			}
		}
		#endregion

		#region EqualsTest_RuzneID
		/// <summary>
		/// Základní test na funkčnost Equals při různých ID.
		/// </summary>
		[TestMethod]
		public void EqualsTest_RuzneID()
		{
			using (new IdentityMapScope())
			{
				Role role1 = Role.GetObject(-1);
				Role role2 = Role.GetObject(1);

				Assert.IsFalse(role1.Equals(role2));
				Assert.IsFalse(role2.Equals(role1));
				Assert.IsFalse(role1 == role2);
				Assert.IsFalse(role2 == role1);
			}
		}
		#endregion

		#region EqualsTest_Nove
		/// <summary>
		/// Základní test na funkčnost Equals na nové objekty.
		/// </summary>
		[TestMethod]
		public void EqualsTest_Nove()
		{
			Subjekt subjekt1 = Subjekt.CreateObject();
			Subjekt subjekt2 = Subjekt.CreateObject();
			Subjekt subjekt3 = subjekt1;

			Assert.IsFalse(subjekt1.Equals(subjekt2));
			Assert.IsFalse(subjekt1.Equals(subjekt2));
			Assert.IsFalse(subjekt1 == subjekt2);
			Assert.IsFalse(subjekt1 == subjekt2);

			Assert.IsTrue(subjekt1.Equals(subjekt3));
			Assert.IsTrue(subjekt1.Equals(subjekt3));
			Assert.IsTrue(subjekt1 == subjekt3);
			Assert.IsTrue(subjekt1 == subjekt3);
		}
		#endregion

		#region GetAllCacheClone
		/// <summary>
		/// Testuje, zda cachovaný GetAll vrací klon kolekce.
		/// </summary>
		[TestMethod]
		public void GetAllCacheClone()
		{
			using (new IdentityMapScope())
			{
				RoleCollection roleCollection1 = Role.GetAll();
				RoleCollection roleCollection2 = Role.GetAll();
				Assert.IsTrue(roleCollection1 != roleCollection2);
			}
		}
		#endregion

		#region GetObject_Neexistujici
		[TestMethod]
		[ExpectedException(typeof(InvalidOperationException))]
		public void GetObject_Neexistujici()
		{
			using (new IdentityMapScope())
			{
				Role.GetObject(-999).Load();
			}
		}
		#endregion

		#region TryLoad_Existujici
		/// <summary>
		/// Základní test na TryLoad existujícího objektu.
		/// </summary>
		[TestMethod]
		public void TryLoad_Existujici()
		{
			using (new IdentityMapScope())
			{
				Role role = Role.GetObject(0);
				Assert.IsTrue(role.TryLoad());
				Assert.IsTrue(role.TryLoad());
			}
		}
		#endregion

		#region TryLoad_Neexistujici
		/// <summary>
		/// Základní test na funkčnost TryLoad neexistujícího objektu.
		/// </summary>
		[TestMethod]
		public void TryLoad_Neexistujici()
		{
			using (new IdentityMapScope())
			{
				Role role = Role.GetObject(999);
				Assert.IsFalse(role.TryLoad());
			}
		}
		#endregion

		#region Save_MultipleSaveTest
		[TestMethod]
		public void Save_SaveAndDeleteTest()
		{
			using (new IdentityMapScope())
			{
				int originalCount = Subjekt.GetAll().Count;
				Subjekt subjekt = Subjekt.CreateObject();
				subjekt.Nazev = "test";
				subjekt.Save();
				DbConnector.Default.ExecuteTransaction(
					delegate(DbTransaction transaction)
						{
							subjekt.Nazev = "test2";
							subjekt.Save(transaction);
							subjekt.Delete(transaction);
						});
				int newCount = Subjekt.GetAll().Count;
				Assert.AreEqual(originalCount, newCount);
			}
		}
		
		#endregion

		#region CheckConstraintOnDeletedObject
		[TestMethod]
		public void CheckConstraintOnDeletedObject()
		{
			using (new IdentityMapScope())
			{
				DbConnector.Default.ExecuteTransaction(delegate(DbTransaction transaction)
				{
					Subjekt subjekt = Subjekt.CreateObject();
					subjekt.Save(transaction);
					string s = "";
					while (s.Length <= Subjekt.Properties.Nazev.MaximumLength)
					{
						s = s + "0";
					}

					subjekt.Nazev = s;
					subjekt.Delete(transaction);
				});
			}
		}
		
		#endregion		

		#region GetNullableID
		/// <summary>
		/// A test for GetNullableID
		/// </summary>
		[TestMethod]
		public void GetNullableIDTest_ID()
		{
			using (new IdentityMapScope())
			{
				BusinessObjectBase businessObject = Role.ZaporneID;
				int? expected = Role.ZaporneID.ID;
				int? actual;
				actual = BusinessObjectBase.GetNullableID(businessObject);
			}
		}

		/// <summary>
		/// A test for GetNullableID
		/// </summary>
		[TestMethod]
		public void GetNullableIDTest_Null()
		{
			BusinessObjectBase businessObject = null;
			int? expected = null;
			int? actual;
			actual = BusinessObjectBase.GetNullableID(businessObject);
			Assert.AreEqual(expected, actual);
		}
		#endregion

		#region FastIntParseTest
		/// <summary>
		/// A test for FastIntParseTest
		/// </summary>
		[TestMethod]
		public void FastIntParseTest()
		{
			Assert.AreEqual(BusinessObjectBase.FastIntParse("0"), 0);
			Assert.AreEqual(BusinessObjectBase.FastIntParse("1"), 1);
			Assert.AreEqual(BusinessObjectBase.FastIntParse("-1"), -1);
			Assert.AreEqual(BusinessObjectBase.FastIntParse("999999"), 999999);
			Assert.AreEqual(BusinessObjectBase.FastIntParse("-999999"), -999999);
			Assert.AreEqual(BusinessObjectBase.FastIntParse("123456789"), 123456789);
		}
		#endregion

		#region CreateDisconnectedObjectCannotBeCreatedWhenInIdentityMap
		/// <summary>
		/// Testuje, že není možné vytvořit instanci disconnected objektů těch objektů, které již jsou v identity mapě.
		/// </summary>
		[TestMethod]
		[ExpectedException(typeof(InvalidOperationException))]
		public void CreateDisconnectedObjectCannotBeCreatedWhenInIdentityMap()
		{
			using (new IdentityMapScope())
			{
				Subjekt.GetObject(1);
				Subjekt.CreateDisconnectedObject(1);
			}
		}
		#endregion

		#region CreateDisconnectedObjectGetObjectsReturnsOfflineObject
		/// <summary>
		/// Testuje, že GetObject vrací z identity mapy i disconnected object.
		/// </summary>
		[TestMethod]
		public void CreateDisconnectedObjectGetObjectsReturnsOfflineObject()
		{
			using (new IdentityMapScope())
			{
				var subjektCreated = Subjekt.CreateDisconnectedObject(1);
				var subjektFromIdentityMap = Subjekt.GetObject(1);
				Assert.AreSame(subjektCreated, subjektFromIdentityMap);
			}
		}
		#endregion

		#region CreateDisconnectedObjectPropertiesSetup
		/// <summary>
		/// Testuje a ověřuje nastavení vlastností disconnected business objektu po jeho založení.
		/// </summary>
		[TestMethod]
		public void CreateDisconnectedObjectPropertiesSetup()
		{
			using (new IdentityMapScope())
			{
				Subjekt subjekt = Subjekt.CreateDisconnectedObject(1);
				Assert.IsTrue(subjekt.IsDisconnected, "Objekt by měl být disconnected.");
				Assert.IsFalse(subjekt.IsNew, "Objekt by neměl být označen, jako nový.");
				Assert.IsTrue(subjekt.IsDirty, "Objekt bude označen, jako dirty - jsou mu nastaveny výchozí hodnoty.");
				Assert.IsTrue(subjekt.IsLoaded, "Objekt by měl být považován za načtený.");
				Assert.IsFalse(subjekt.IsDeleted, "Objekt by neměl být považován za smazaný.");
			}
		}
		#endregion

		#region CreateObjectPropertiesSetup
		/// <summary>
		/// Testuje a ověřuje nastavení vlastností business objektu po jeho založení.
		/// </summary>
		[TestMethod]
		public void CreateObjectPropertiesSetup()
		{
			using (new IdentityMapScope())
			{
				Subjekt subjekt = Subjekt.CreateObject();
				Assert.IsFalse(subjekt.IsDisconnected);
				Assert.IsTrue(subjekt.IsNew);
				Assert.IsTrue(subjekt.IsDirty);
				Assert.IsTrue(subjekt.IsLoaded);
				Assert.IsFalse(subjekt.IsDeleted);
			}
		}
		#endregion

		#region DisconnectedObjectDoesNotLoadFromDatabaseWithoutTransaction
		/// <summary>
		/// Testuje, že disconnected objekt se nenačítá z databáze (volání bez transakce).
		/// </summary>
		[TestMethod]
		public void DisconnectedObjectDoesNotLoadFromDatabaseWithoutTransaction()
		{
			using (new IdentityMapScope())
			{
				Subjekt subjekt = Subjekt.CreateDisconnectedObject(-999);
				Assert.IsTrue(subjekt.TryLoad());
			}
		}
		#endregion

		#region DisconnectedObjectDoesNotLoadFromDatabaseWithTransaction
		/// <summary>
		/// Testuje, že disconnected objekt se nenačítá z databáze (volání s transakcí).
		/// </summary>
		[TestMethod]
		public void DisconnectedObjectDoesNotLoadFromDatabaseWithTransaction()
		{
			using (new IdentityMapScope())
			{
				Subjekt subjekt = Subjekt.CreateDisconnectedObject(-999);
				DbConnector.Default.ExecuteTransaction(transaction => { Assert.IsTrue(subjekt.TryLoad(transaction)); });
			}
		}
		#endregion

		#region TryLoad_Perform, Save_Perform, Delete_Perform
		protected override bool TryLoad_Perform(DbTransaction transaction)
		{
			throw new NotSupportedException();
		}

		protected override void Save_Perform(DbTransaction transaction)
		{
			throw new NotSupportedException();
		}

		protected override void Delete_Perform(DbTransaction transaction)
		{
			throw new NotSupportedException();
		}
		#endregion		
	}

}
