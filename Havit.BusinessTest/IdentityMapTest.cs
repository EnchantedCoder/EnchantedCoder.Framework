// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Havit.Business;
namespace Havit.BusinessTest
{
	/// <summary>
	///This is a test class for Havit.Business.IdentityMap and is intended
	///to contain all Havit.Business.IdentityMap Unit Tests
	///</summary>
	[TestClass()]
	public class IdentityMapTest
	{
		#region TestContext
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#endregion

		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion

		#region Store
		/// <summary>
		///A test for Store&lt;&gt; (T)
		///</summary>
		[TestMethod()]
		[ExpectedException(typeof(InvalidOperationException))]
		public void StoreTest_StoreRuznychInstanci()
		{
			IdentityMap target = new IdentityMap();

			TestingBusinessObject businessObject1 = new TestingBusinessObject(10); // TODO: Initialize to an appropriate value
			TestingBusinessObject businessObject2 = new TestingBusinessObject(10); // TODO: Initialize to an appropriate value

			target.Store(businessObject1);
			target.Store(businessObject2);
		}
		#endregion

		#region Get
		/// <summary>
		///A test for Get&lt;&gt; (int)
		///</summary>
		[TestMethod()]
		public void GetTest_Exist()
		{
			IdentityMap target = new IdentityMap();

			TestingBusinessObject businessObject = new TestingBusinessObject(10);
			TestingBusinessObject actual;

			target.Store(businessObject);
			actual = target.Get<TestingBusinessObject>(10);

			Assert.AreSame(actual, businessObject);
		}

		/// <summary>
		///A test for Get&lt;&gt; (int)
		///</summary>
		[TestMethod()]
		public void GetTest_NotExist()
		{
			IdentityMap target = new IdentityMap();
			TestingBusinessObject actual = target.Get<TestingBusinessObject>(10);

			Assert.IsNull(actual);
		}
		#endregion

		#region TryGet
		/// <summary>
		///A test for TryGet&lt;&gt; (int)
		///</summary>
		[TestMethod()]
		public void TryGetTest_Exist()
		{
			IdentityMap im = new IdentityMap();

			TestingBusinessObject businessObject = new TestingBusinessObject(10);
			TestingBusinessObject target;

			im.Store(businessObject);
			bool result = im.TryGet<TestingBusinessObject>(10, out target);

			Assert.AreSame(target, businessObject);
			Assert.IsTrue(result);
		}

		/// <summary>
		///A test for TryGet&lt;&gt; (int)
		///</summary>
		[TestMethod()]
		public void TryGetTest_NotExist()
		{
			IdentityMap im = new IdentityMap();

			TestingBusinessObject businessObject = new TestingBusinessObject(10);
			TestingBusinessObject target;

			im.Store(businessObject);
			bool result = im.TryGet<TestingBusinessObject>(11, out target);

			Assert.IsNull(target);
			Assert.IsFalse(result);
		}

		/// <summary>
		///A test for TryGet&lt;&gt; (int)
		///</summary>
		[TestMethod()]
		public void TryGetTest_GC()
		{
			IdentityMap im = new IdentityMap();

			TestingBusinessObject businessObject = new TestingBusinessObject(10);
			TestingBusinessObject target;

			im.Store(businessObject);
			businessObject = null;
			GC.Collect();
			bool result = im.TryGet<TestingBusinessObject>(10, out target);

			Assert.IsNull(target);
			Assert.IsFalse(result);
		}

		#endregion
	}
}
