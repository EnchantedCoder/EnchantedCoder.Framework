// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Havit.Business;
namespace Havit.BusinessTest
{
	/// <summary>
	/// This is a test class for Havit.Business.BusinessCalendar and is intended
	/// to contain all Havit.Business.BusinessCalendar Unit Tests
	/// </summary>
	[TestClass]
	public class BusinessCalendarTest
	{
		//#region CountBusinessDaysTests
		///// <summary>
		///// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		///// </summary>
		//[TestMethod]
		//public void CountBusinessDaysTest_SingleDayHolidayIncludeEndDate()
		//{
		//	BusinessCalendar target = new BusinessCalendar(new DateTime[] { new DateTime(2007, 10, 08) });

		//	DateTime startDate = new DateTime(2007, 10, 08);
		//	DateTime endDate = new DateTime(2007, 10, 08);
		//	CountBusinessDaysOptions options = CountBusinessDaysOptions.IncludeEndDate;

		//	int expected = 0;
		//	int actual;

		//	actual = target.CountBusinessDays(startDate, endDate, options);

		//	Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		//}

		///// <summary>
		///// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		///// </summary>
		//[TestMethod]
		//public void CountBusinessDaysTest_TwoDaysWithHolidayIncludeEndDate()
		//{
		//	BusinessCalendar target = new BusinessCalendar(new DateTime[] { new DateTime(2007, 10, 08) });

		//	DateTime startDate = new DateTime(2007, 10, 08);
		//	DateTime endDate = new DateTime(2007, 10, 09);
		//	CountBusinessDaysOptions options = CountBusinessDaysOptions.IncludeEndDate;

		//	int expected = 1;
		//	int actual;

		//	actual = target.CountBusinessDays(startDate, endDate, options);

		//	Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		//}

		#region CountBusinessDaysTest_NoHolidaysIncludeEndDate
		/// <summary>
		/// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		/// </summary>
		[TestMethod]
		public void CountBusinessDaysTest_NoHolidaysIncludeEndDate()
		{
			BusinessCalendar target = new BusinessCalendar();

			DateTime startDate = new DateTime(2007, 10, 08);
			DateTime endDate = new DateTime(2007, 10, 09);
			CountBusinessDaysOptions options = CountBusinessDaysOptions.IncludeEndDate;

			int expected = 2;
			int actual;

			actual = target.CountBusinessDays(startDate, endDate, options);

			Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		}
		#endregion

		#region CountBusinessDaysTest_SingleDayNoHolidaysIncludeEndDate
		/// <summary>
		/// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		/// </summary>
		[TestMethod]
		public void CountBusinessDaysTest_SingleDayNoHolidaysIncludeEndDate()
		{
			BusinessCalendar target = new BusinessCalendar();

			DateTime startDate = new DateTime(2007, 10, 08);
			DateTime endDate = new DateTime(2007, 10, 08);
			CountBusinessDaysOptions options = CountBusinessDaysOptions.IncludeEndDate;

			int expected = 1;
			int actual;

			actual = target.CountBusinessDays(startDate, endDate, options);

			Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		}
		#endregion

		#region CountBusinessDaysTest_SingleDayNoHolidaysExcludeEndDate
		/// <summary>
		/// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		/// </summary>
		[TestMethod]
		public void CountBusinessDaysTest_SingleDayNoHolidaysExcludeEndDate()
		{
			BusinessCalendar target = new BusinessCalendar();

			DateTime startDate = new DateTime(2007, 10, 08);
			DateTime endDate = new DateTime(2007, 10, 08);
			CountBusinessDaysOptions options = CountBusinessDaysOptions.ExcludeEndDate;

			int expected = 0;
			int actual;

			actual = target.CountBusinessDays(startDate, endDate, options);

			Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		}
		#endregion

		#region CountBusinessDaysTest_TwoDatesNoHolidaysExcludeEndDate
		/// <summary>
		/// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		/// </summary>
		[TestMethod]
		public void CountBusinessDaysTest_TwoDatesNoHolidaysExcludeEndDate()
		{
			BusinessCalendar target = new BusinessCalendar();

			DateTime startDate = new DateTime(2007, 10, 08);
			DateTime endDate = new DateTime(2007, 10, 09);
			CountBusinessDaysOptions options = CountBusinessDaysOptions.ExcludeEndDate;

			int expected = 1;
			int actual;

			actual = target.CountBusinessDays(startDate, endDate, options);

			Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		}
		#endregion

		#region CountBusinessDaysTest_Weekend
		/// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		/// </summary>
		[TestMethod]
		public void CountBusinessDaysTest_Weekend()
		{
			BusinessCalendar target = new BusinessCalendar();

			DateTime startDate = new DateTime(2007, 10, 6);
			DateTime endDate = new DateTime(2007, 10, 7);
			CountBusinessDaysOptions options = CountBusinessDaysOptions.IncludeEndDate;

			int expected = 0;
			int actual;

			actual = target.CountBusinessDays(startDate, endDate, options);

			Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		}
		#endregion

		#region CountBusinessDaysTest_ReverseDates()
		/// <summary>
		/// A test for CountBusinessDays (DateTime, DateTime, CountBusinessDaysOptions)
		/// </summary>
		[TestMethod]
		public void CountBusinessDaysTest_ReverseDates()
		{
			BusinessCalendar target = new BusinessCalendar();

			DateTime startDate = new DateTime(2007, 10, 10);
			DateTime endDate = new DateTime(2007, 10, 8);
			CountBusinessDaysOptions options = CountBusinessDaysOptions.IncludeEndDate;

			int expected = -3;
			int actual;

			actual = target.CountBusinessDays(startDate, endDate, options);

			Assert.AreEqual(expected, actual, "Havit.Business.BusinessCalendar.CountBusinessDays did not return the expected value.");
		}
		#endregion

		#region IsWeekendTest
		[TestMethod]
		public void IsWeekendTest()
		{
			BusinessCalendar target = new BusinessCalendar();

			Assert.IsFalse(target.IsWeekend(new DateTime(2015, 3, 2)));
			Assert.IsFalse(target.IsWeekend(new DateTime(2015, 3, 3)));
			Assert.IsFalse(target.IsWeekend(new DateTime(2015, 3, 4)));
			Assert.IsFalse(target.IsWeekend(new DateTime(2015, 3, 5)));
			Assert.IsFalse(target.IsWeekend(new DateTime(2015, 3, 6)));
			Assert.IsTrue(target.IsWeekend(new DateTime(2015, 3, 7)));
			Assert.IsTrue(target.IsWeekend(new DateTime(2015, 3, 8)));
		}
		#endregion
	}
}
