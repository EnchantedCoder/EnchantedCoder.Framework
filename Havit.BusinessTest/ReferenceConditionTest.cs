// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Havit.Business.Query;
using Havit.BusinessLayerTest;
namespace Havit.BusinessTest
{
	/// <summary>
	/// This is a test class for Havit.Business.Query.ReferenceCondition and is intended
	/// to contain all Havit.Business.Query.ReferenceCondition Unit Tests
	/// </summary>
	[TestClass]
	public class ReferenceConditionTest
	{
		#region CreateEquals
		/// <summary>
		/// A test for CreateEquals (IOperand, int?)
		/// </summary>
		[TestMethod]
		public void CreateEqualsTest_ZaporneID_Neexistujici()
		{
			IOperand operand = Subjekt.Properties.Uzivatel;
			int? id = -10145603;  // neexistující uživatel

			QueryParams qp = new QueryParams();
			qp.Conditions.Add(ReferenceCondition.CreateEquals(operand, id));
			SubjektCollection subjekty = Subjekt.GetList(qp);

			Assert.AreEqual(subjekty.Count, 0);
		}
		#endregion

		#region CreateInTests
		/// <summary>
		/// Test CreateIn na prázdné pole. Vrací StaticCondition, která se vždy vyhodnotí jak neplatná podmínka.
		/// </summary>
		[TestMethod]
		public void CreateInTest_0()
		{
			IOperand operand = ValueOperand.Create(0);

			Condition condition = ReferenceCondition.CreateIn(operand, new int[] { });
			Assert.IsTrue(condition.GetType().Name == "StaticCondition"); // interní třída
		}

		/// <summary>
		/// Test CreateIn na pole o jedné hodnotě. Vrací BinaryCondition testující rovnost hodnoty.
		/// </summary>
		[TestMethod]
		public void CreateInTest_1()
		{
			IOperand operand = ValueOperand.Create(0);

			Condition condition = ReferenceCondition.CreateIn(operand, new int[] { 1 });
			Assert.IsTrue(condition is BinaryCondition);
		}

		/// <summary>
		/// Test CreateIn na pole o více hodnotách, přičemž interval je spojiný. Vrací TernaryCondition testující hodnotu v rozmezí (between).
		/// </summary>
		[TestMethod]
		public void CreateInTest_More_Continuous()
		{
			IOperand operand = ValueOperand.Create(0);

			Condition condition = ReferenceCondition.CreateIn(operand, new int[] { 1, 3, 2, 0 });
			Assert.IsTrue(condition is TernaryCondition);
		}

		/// <summary>
		/// Test CreateIn na pole o více hodnotách, přičemž interval není spojiný. Vrací ReferenceInCondition.
		/// </summary>
		[TestMethod]
		public void CreateInTest_More_NotContinuous()
		{
			IOperand operand = ValueOperand.Create(0);

			Condition condition = ReferenceCondition.CreateIn(operand, new int[] { 1, 3, 5, 7 });
			Assert.IsTrue(condition.GetType().Name == "ReferenceInCondition"); // interní třída
		}

		/// <summary>
		/// Test CreateIn na pole o jedné hodnotě, byť duplikované. Vrací BinaryCondition.
		/// </summary>
		[TestMethod]
		public void CreateInTest_1_Duplicates()
		{
			IOperand operand = ValueOperand.Create(0);

			Condition condition = ReferenceCondition.CreateIn(operand, new int[] { 1, 1, 1 });
			Assert.IsTrue(condition is BinaryCondition);
		}
		#endregion
	}
}
