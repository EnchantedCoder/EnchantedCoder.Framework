// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.

using System.Linq;

using Havit.Business;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Havit.BusinessLayerTest;

namespace Havit.BusinessTest
{
	/// <summary>
	/// This is a test class for Havit.Business.ActiveRecordBusinessObjectBase and is intended
	/// to contain all Havit.Business.ActiveRecordBusinessObjectBase Unit Tests
	/// </summary>
	[TestClass]
	public class BusinessLayerTest
	{
		#region BusinessLayerTest_ZaporneID
		/// <summary>
		/// Základní test na funkčnost záporných ID.
		/// </summary>
		[TestMethod]
		public void BusinessLayerTest_ZaporneID()
		{
			using (new IdentityMapScope())
			{
				Role role = Role.GetObject(-1);

				Assert.IsFalse(String.IsNullOrEmpty(role.Symbol));
				Assert.AreEqual(role.Symbol, Role.ZaporneID.Symbol);
			}
		}
		#endregion

		#region BusinessLayerTest_NuloveID
		/// <summary>
		/// Základní test na funkčnost nulových ID.
		/// </summary>
		[TestMethod]
		public void BusinessLayerTest_NuloveID()
		{
			using (new IdentityMapScope())
			{
				Role role = Role.GetObject(0);

				Assert.IsFalse(String.IsNullOrEmpty(role.Symbol));
				Assert.AreEqual(role.Symbol, Role.NuloveID.Symbol);
			}
		}
		#endregion

		#region BusinessLayerTest_ZakazaneNoID
		/// <summary>
		/// Základní test na funkčnost zakázaného NoID.
		/// </summary>
		[TestMethod]
		[ExpectedException(typeof(InvalidOperationException))]
		public void BusinessLayerTest_ZakazaneNoID()
		{
			using (new IdentityMapScope())
			{
				Role role = Role.GetObject(Role.NoID);
			}
		}
		#endregion

		#region BusinessLayerTest_CyclicUpdateWithInsert

		/// <summary>
		/// Nový objekt ukládá cyklický graf, kde sám by měl být minimal-insertován od jiného objektu, který je Update.
		/// </summary>
		[TestMethod]
		public void BusinessLayerTest_CyclicUpdateWithInsert()
		{
			using (new IdentityMapScope())
			{
				Subjekt s = Subjekt.CreateObject();
				s.Save();

				Komunikace k1 = Komunikace.CreateObject();
				k1.Subjekt = s;
				s.Komunikace.Add(k1);
				k1.Save();

				ObjednavkaSepsani o1 = ObjednavkaSepsani.CreateObject();
				k1.ObjednavkaSepsani = o1;
				k1.Save();

				Komunikace k2 = Komunikace.CreateObject();
				k2.Subjekt = s;
				s.Komunikace.Add(k2);

				o1.StornoKomunikace = k2;
				k2.Save();

				Assert.IsFalse(k2.IsDirty);
				Assert.IsFalse(k2.IsNew);
				Assert.IsFalse(o1.IsDirty);
			}
		}

		#endregion

		#region BusinessLayerTest_Delete_Zavislosti
		/// <summary>
		/// Pokud máme objekt, na který jsou navázané další objekty, otestujeme možnost smazání.
		/// </summary>
		[TestMethod]
		public void BusinessLayerTest_Delete_Zavislosti()
		{
			using (new IdentityMapScope())
			{
				Uzivatel uzivatel = Uzivatel.CreateObject();
				uzivatel.Username = DateTime.Now.Ticks.ToString("0");
				uzivatel.Role.Add(Role.GetAll().First());
				uzivatel.Save();

				uzivatel.Role.Clear();
				uzivatel.Delete();
			}
		}
		#endregion

	}
}
