// <auto-generated />
using Havit.Data.EntityFrameworkCore.Attributes;
using Havit.EFCoreTests.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Havit.EFCoreTests.Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181025085829_Security")]
    partial class Security
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Havit.Data.EntityFrameworkCore.Model.DataSeedVersion", b =>
                {
                    b.Property<string>("ProfileName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250);

                    b.Property<string>("Version");

                    b.HasKey("ProfileName")
                        .HasName("PK_DataSeed");

                    b.ToTable("__DataSeed");
                });

            modelBuilder.Entity("Havit.EFCoreTests.Model.Localizations.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Culture")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Symbol")
                        .HasMaxLength(50);

                    b.Property<string>("UiCulture")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasAnnotation("Caching-AbsoluteExpiration", 60);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);

                    b.HasAnnotation("Caching-Priority", CacheItemPriority.High);
                });

            modelBuilder.Entity("Havit.EFCoreTests.Model.Security.LoginAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("LoginAccount");
                });

            modelBuilder.Entity("Havit.EFCoreTests.Model.Security.Membership", b =>
                {
                    b.Property<int>("LoginAccountId");

                    b.Property<int>("RoleId");

                    b.HasKey("LoginAccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("Havit.EFCoreTests.Model.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasAnnotation("Caching-AllKeysEnabled", true);

                    b.HasAnnotation("Caching-EntitiesEnabled", true);
                });

            modelBuilder.Entity("Havit.EFCoreTests.Model.Security.Membership", b =>
                {
                    b.HasOne("Havit.EFCoreTests.Model.Security.LoginAccount", "LoginAccount")
                        .WithMany("Memberships")
                        .HasForeignKey("LoginAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Havit.EFCoreTests.Model.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
