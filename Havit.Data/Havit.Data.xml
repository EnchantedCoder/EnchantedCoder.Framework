<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Havit.Data</name>
    </assembly>
    <members>
        <member name="T:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory">
            <summary>
            Třída zapouzdřuje předaný DbProviverFactory a deleguje veškeré činnosti na něj.
            Avšak metoda CreateCommand navíc nastaví vlastnost CommandTimeout na zvolenou hodnotu.
            Metoda CreateCommandBuilder se neřeší.
            </summary>
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.#ctor(System.Data.Common.DbProviderFactory,System.Int32)">
            <summary>
            Konstruktor.
            </summary>
            <param name="wrappedDbProviderFactory">Zapouzdřený DbProviderFactory, na který jsou delegována volání jednotlivých metod.</param>
            <param name="commandTimeout">Timeout, který je nastaven metodou CreateCommand.</param>
        </member>
        <member name="P:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CanCreateDataSourceEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreateCommand">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreateCommandBuilder">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreateConnection">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreateConnectionStringBuilder">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreateDataAdapter">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreateDataSourceEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreateParameter">
            <inheritdoc />
        </member>
        <member name="M:Havit.Data.Common.Specialized.CustomCommandTimeoutWrappingDbProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <inheritdoc />
        </member>
        <member name="T:Havit.Data.DataLoadPower">
            <summary>
            Rozsah dat v datovém zdroji.
            </summary>
        </member>
        <member name="F:Havit.Data.DataLoadPower.Ghost">
            <summary>
            Datový zdroj obsahuje jen informace pro založení ghosta (primární klíč).
            </summary>
        </member>
        <member name="F:Havit.Data.DataLoadPower.FullLoad">
            <summary>
            Datový zdroj obsahuje kompletní řádek dat (všechny možné sloupce).
            </summary>
        </member>
        <member name="F:Havit.Data.DataLoadPower.PartialLoad">
            <summary>
            Datový zdroj obsahuje nekompletní řádek dat.
            </summary>
        </member>
        <member name="T:Havit.Data.DataRecord">
            <summary>
            DataRecord usnadňuje načítání dat objektu z databáze.
            Zejména vhodný je pro situace, kdy je možné i částečné načítání.
            </summary>
            <remarks>
            DataRecord pracuje tak, že v constructoru zkopíruje celý datový záznam do slovníku Dictionary&lt;field, value&gt;.
            V jednotlivých Loadech pak už jenom načítá data ze slovníku.<br/>
            Datový zdroj je tedy potřeba pouze v okamžiku volání constructoru a následně ho můžeme zlikvidovat.<br/>
            Stejnětak je vhodné použít na všechny loady jeden DataRecord a předávat si ho mezi objekty.
            </remarks>
        </member>
        <member name="P:Havit.Data.DataRecord.FullLoad">
            <summary>
            Indikuje, zdali je požadována 100% úspěšnost pro načítání položek (true), nebo zdali se mají neúspěchy ignorovat.
            </summary>
        </member>
        <member name="P:Havit.Data.DataRecord.DataLoadPower">
            <summary>
            Indikuje množství dat, které jsou uloženy v DataRecordu vůči všem možným sloupcům řádků.
            </summary>
        </member>
        <member name="F:Havit.Data.DataRecord.dataDictionary">
            <summary>
            Data z databáze.
            </summary>
        </member>
        <member name="M:Havit.Data.DataRecord.#ctor(System.Data.DataRow,Havit.Data.DataLoadPower)">
            <summary>
            Vytvoří instanci DataRecordu a načte do ní data z <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="row">datový zdroj typu DataRow</param>
            <param name="dataLoadPower">Rozsah dat v datovém zdroji.</param>
        </member>
        <member name="M:Havit.Data.DataRecord.#ctor(System.Data.DataRow,System.Boolean)">
            <summary>
            Vytvoří instanci DataRecordu a načte do ní data z <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="row">datový zdroj typu DataRow</param>
            <param name="fullLoad">true, má-li být při nenalezení parametru vyvolána výjimka</param>
        </member>
        <member name="M:Havit.Data.DataRecord.#ctor(System.Data.DataRow)">
            <summary>
            Vytvoří instanci DataRecordu a načte do ní data z <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="row">datový zdroj typu <see cref="T:System.Data.DataRow"/></param>
        </member>
        <member name="M:Havit.Data.DataRecord.#ctor(System.Data.IDataRecord,Havit.Data.DataLoadPower)">
            <summary>
            Vytvoří instanci DataRecordu a načte do ní data z <see cref="T:System.Data.IDataRecord"/>
            (např. <see cref="T:System.Data.SqlClient.SqlDataReader"/>).
            </summary>
            <param name="record">datový zdroj <see cref="T:System.Data.IDataRecord"/> (např. <see cref="T:System.Data.SqlClient.SqlDataReader"/>)</param>
            <param name="dataLoadPower">Rozsah dat v datovém zdroji.</param>
        </member>
        <member name="M:Havit.Data.DataRecord.#ctor(System.Data.IDataRecord,System.Boolean)">
            <summary>
            Vytvoří instanci DataRecordu a načte do ní data z <see cref="T:System.Data.IDataRecord"/>
            (např. <see cref="T:System.Data.SqlClient.SqlDataReader"/>).
            </summary>
            <param name="record">datový zdroj <see cref="T:System.Data.IDataRecord"/> (např. <see cref="T:System.Data.SqlClient.SqlDataReader"/>)</param>
            <param name="fullLoad">true, má-li být při nenalezení parametru vyvolána výjimka</param>
        </member>
        <member name="M:Havit.Data.DataRecord.#ctor(System.Data.IDataRecord)">
            <summary>
            Vytvoří instanci DataRecordu a načte do ní data z <see cref="T:System.Data.IDataRecord"/>
            (např. <see cref="T:System.Data.SqlClient.SqlDataReader"/>).
            </summary>
            <param name="record">datový zdroj <see cref="T:System.Data.IDataRecord"/> (např. <see cref="T:System.Data.SqlClient.SqlDataReader"/>)</param>
        </member>
        <member name="P:Havit.Data.DataRecord.Item(System.String)">
            <summary>
            Indexer pro získání k prvku pomocí názvu pole.
            </summary>
            <param name="field">pole, sloupec</param>
            <returns>hodnota</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.TryGet``1(System.String,``0@)">
            <summary>
            Načte parametr zadaného generického typu T.
            </summary>
            <typeparam name="T">Typ hodnoty.</typeparam>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>
            <c>true</c>, pokud byla načtena hodnota;<br/>
            <c>false</c>, pokud field v data recordu není a vlastnost <see cref="P:Havit.Data.DataRecord.FullLoad"/> je <c>false</c> (target je pak nastaven na <c>default(T)</c>);<br/>
            </returns>
            <exception cref="T:System.ArgumentException">pokud field v data recordu není a vlastnost <see cref="P:Havit.Data.DataRecord.FullLoad"/> je <c>true</c></exception>
            <exception cref="T:System.InvalidCastException">pokud nelze převést field na výstupní typ, nebo pokud je field <see cref="T:System.DBNull"/> a výstupní typ nemá <c>null</c></exception>
        </member>
        <member name="M:Havit.Data.DataRecord.Get``1(System.String)">
            <summary>
            Vrátí parametr zadaného generického typu.
            </summary>
            <typeparam name="T">Typ hodnoty.</typeparam>
            <remarks>
            Mimo castingu se pokouší i o konverzi typu pomocí IConvertible.
            </remarks>
            <param name="fieldName">jméno parametru</param>
            <returns>
            vrátí hodnotu typu T;<br/>
            pokud parametr neexistuje a není <see cref="P:Havit.Data.DataRecord.FullLoad"/>, pak vrací <c>default(T)</c>, ve FullLoad hází výjimku ArgumentException;<br/>
            pokud má parametr hodnotu NULL, pak vrací <c>null</c> pro referenční typy, pro hodnotové typy hází výjimku InvalidCastException<br/>
            </returns>
            <exception cref="T:System.ArgumentException">pokud field v data recordu není a vlastnost <see cref="P:Havit.Data.DataRecord.FullLoad"/> je <c>true</c></exception>
            <exception cref="T:System.InvalidCastException">pokud nelze převést field na výstupní typ, nebo pokud je field <see cref="T:System.DBNull"/> a výstupní typ nemá <c>null</c></exception>
        </member>
        <member name="M:Havit.Data.DataRecord.Load``1(System.String,``0@)">
            <summary>
            Načte parametr zadaného generického typu T.
            </summary>
            <typeparam name="T">Typ hodnoty.</typeparam>
            <remarks>
            Narozdíl od <see cref="M:Havit.Data.DataRecord.TryGet``1(System.String,``0@)"/> neindikuje přítomnost fieldu v data recordu, nýbrž je-li field roven <see cref="T:System.DBNull"/>.<br/>
            Pokud je field <see cref="T:System.DBNull"/>, pak parametr <c>target</c> nezmění
            </remarks>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>
            <c>false</c>, pokud má field hodnotu <see cref="T:System.DBNull"/>;<br/>
            <c>false</c>, pokud nebyl field nalezen a <see cref="P:Havit.Data.DataRecord.FullLoad"/> je <c>false</c>;
            <c>true</c>, pokud byla načtena hodnota
            </returns>
            <exception cref="T:System.ArgumentException">pokud nebyl field nalezen a <see cref="P:Havit.Data.DataRecord.FullLoad"/> je <c>true</c></exception>
            <exception cref="T:System.InvalidCastException">pokud nelze převést field na výstupní typ</exception>
        </member>
        <member name="M:Havit.Data.DataRecord.LoadObject(System.String,System.Object@)">
            <summary>
            Načte parametr typu Object.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>false, pokud má parametr hodnotu NULL; true, pokud byla načtena hodnota</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.GetObject(System.String)">
            <summary>
            Vrátí parametr typu Object.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <returns>null, pokud má parametr hodnotu NULL, nebo neexistuje; jinak hodnota typu Object</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.LoadString(System.String,System.String@)">
            <summary>
            Načte parametr typu string.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>false, pokud má parametr hodnotu NULL; true, pokud byla načtena hodnota</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.GetString(System.String)">
            <summary>
            Vrátí parametr typu String.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <returns>null, pokud má parametr hodnotu NULL, nebo neexistuje; jinak hodnota typu String</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.LoadInt32(System.String,System.Int32@)">
            <summary>
            Načte parametr typu Int32.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>false, pokud má parametr hodnotu NULL; true, pokud byla načtena hodnota</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.GetNullableInt32(System.String)">
            <summary>
            Vrátí parametr typu Int32?.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <returns>null, pokud má parametr hodnotu NULL, nebo neexistuje; jinak hodnota typu Int32</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.LoadDouble(System.String,System.Double@)">
            <summary>
            Načte parametr typu Double.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>false, pokud má parametr hodnotu NULL; true, pokud byla načtena hodnota</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.GetNullableDouble(System.String)">
            <summary>
            Vrátí parametr typu Double?.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <returns>null, pokud má parametr hodnotu NULL, nebo neexistuje; jinak hodnota typu Double</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.LoadBoolean(System.String,System.Boolean@)">
            <summary>
            Načte parametr typu Boolean.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>false, pokud má parametr hodnotu NULL; true, pokud byla načtena hodnota</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.GetNullableBoolean(System.String)">
            <summary>
            Vrátí parametr typu bool?.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <returns>null, pokud má parametr hodnotu NULL, nebo neexistuje; jinak hodnota typu Boolean</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.LoadDateTime(System.String,System.DateTime@)">
            <summary>
            Načte parametr typu DateTime.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <param name="target">cíl, kam má být parametr uložen</param>
            <returns>false, pokud má parametr hodnotu NULL; true, pokud byla načtena hodnota</returns>
        </member>
        <member name="M:Havit.Data.DataRecord.GetNullableDateTime(System.String)">
            <summary>
            Vrátí parametr typu DateTime?.
            </summary>
            <param name="fieldName">jméno parametru</param>
            <returns>null, pokud má parametr hodnotu NULL, nebo neexistuje; jinak hodnota typu DateTime</returns>
        </member>
        <member name="T:Havit.Data.DbConnector">
            <summary>
            Třída usnadňující práci s databázemi.
            </summary>	
        </member>
        <member name="P:Havit.Data.DbConnector.ConnectionString">
            <summary>
            Vrátí connection-string, který spolu s <see cref="P:Havit.Data.DbConnector.ProviderFactory"/> určuje parametry DbConnectoru.
            </summary>
        </member>
        <member name="P:Havit.Data.DbConnector.ProviderFactory">
            <summary>
            Vrátí <see cref="T:System.Data.Common.DbProviderFactory"/>, která spolu s <see cref="P:Havit.Data.DbConnector.ConnectionString"/>em určuje parametry DbConnectoru.
            </summary>
        </member>
        <member name="M:Havit.Data.DbConnector.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Inicializuje instanci třídy <see cref="T:Havit.Data.DbConnector"/>.
            </summary>
            <param name="connectionString">connection-string</param>
            <param name="providerFactory">DbProviderFactory</param>
        </member>
        <member name="M:Havit.Data.DbConnector.#ctor(System.String,System.String)">
            <summary>
            Inicializuje instanci třídy <see cref="T:Havit.Data.DbConnector"/>.
            </summary>
            <param name="connectionString">Connection-string</param>
            <param name="providerInvariantName">Invariant name of a provider.</param>
        </member>
        <member name="M:Havit.Data.DbConnector.#ctor(System.Configuration.ConnectionStringSettings)">
            <summary>
            Inicializuje instanci třídy <see cref="T:Havit.Data.DbConnector"/>.
            </summary>
            <param name="connectionStringSettings">Nastavení <see cref="T:System.Configuration.ConnectionStringSettings"/> načtené z .config souboru. Např. získané přes ConfigurationManager.ConnectionStrings["ConnectionStringName"].</param>
        </member>
        <member name="M:Havit.Data.DbConnector.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            Vytvoří DbCommand dle zadaných parametrů. Nenastavuje spojení ani jiné vlastnosti.
            </summary>
            <param name="commandText">SQL text příkazu</param>
            <param name="commandType">typ příkazu <see cref="T:System.Data.CommandType"/></param>
        </member>
        <member name="M:Havit.Data.DbConnector.SetCommandDefaults(System.Data.Common.DbCommand)">
            <summary>
            Nastaví příkazu default parametry (zatím pouze Connection), nejsou-li nastaveny.
            </summary>
            <remarks>
            Pokud jsme v transakci, pak zde sjednotíme Connection (nechápu, proč to nedělá sám .NET Framework).
            </remarks>
            <param name="command"><see cref="T:System.Data.Common.DbCommand"/> k nastavení</param>
        </member>
        <member name="M:Havit.Data.DbConnector.GetConnection(System.Boolean)">
            <summary>
            Vrátí novou instanci provider-specific potomka <see cref="T:System.Data.Common.DbConnection"/> a pokud to požadujeme, tak ji rovnou otevře.
            </summary>
            <param name="openConnection"><c>true</c>, má-li se nová SqlConnection rovnou otevřít</param>
        </member>
        <member name="M:Havit.Data.DbConnector.GetConnection">
            <summary>
            Vrátí novou instanci provider-specific potomka <see cref="T:System.Data.Common.DbConnection"/>.
            Connection není otevřena.
            </summary>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Vykoná <see cref="T:System.Data.Common.DbCommand"/> a vrátí počet dotčených řádek.
            Nejobecnější metoda, kterou používají ostatní overloady.
            </summary>
            <remarks>
            Není-li Connection příkazu nastaveno, použije imlicitní.
            Není-li Connection dosud otevřeno, otevře ho, vykoná příkaz a zavře.
            Nemá-li počet dotčených řádek smysl, vrací -1.
            </remarks>
            <param name="command"><see cref="T:System.Data.Common.DbCommand"/>, který má být vykonán</param>
            <returns>počet dotčených řádek</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Vykoná zadaný příkaz určeného typu bez parametrů. Vrátí počet dotčených řádek.
            </summary>
            <param name="commandText">SQL příkaz</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/> příkazu</param>
            <returns>počet dotčených řádek</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteNonQuery(System.String)">
            <summary>
            Vykoná zadaný příkaz bez parametrů. Vrátí počet dotčených řádek.
            </summary>
            <remarks>
            Jako <see cref="T:System.Data.CommandType"/> používá <see cref="F:System.Data.CommandType.Text"/>.
            </remarks>
            <param name="commandText">SQL příkaz</param>
            <returns>počet dotčených řádek</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Vykoná <see cref="T:System.Data.Common.DbCommand"/> a vrátí resultset ve formě <see cref="T:System.Data.DataSet"/>u.
            </summary>
            <remarks>
            Je-li cmd.Connection otevřeno, nechá ho otevřené. Není-li, otevře si ho a zase zavře.
            </remarks>
            <param name="command">DbCommand k vykonání</param>
            <returns>resultset příkazu ve formě <see cref="T:System.Data.DataSet"/>u</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataSet(System.String,System.Data.CommandType)">
            <summary>
            Vykoná příkaz commandText daného commandType a vrátí resultset ve formě <see cref="T:System.Data.DataSet"/>u.
            </summary>
            <param name="commandText">SQL příkaz</param>
            <param name="commandType">typ příkazu</param>
            <returns>resultset příkazu ve formě <see cref="T:System.Data.DataSet"/>u</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataSet(System.String)">
            <summary>
            Vykoná SQL příkaz cmdText typu <see cref="F:System.Data.CommandType.Text"/> a vrátí resultset ve formě <see cref="T:System.Data.DataSet"/>u.
            </summary>
            <param name="commandText">textový SQL příkaz</param>
            <returns>resultset příkazu ve formě <see cref="T:System.Data.DataSet"/>u</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataTable(System.Data.Common.DbCommand)">
            <summary>
            Vykoná <see cref="T:System.Data.Common.DbCommand"/> a vrátí první resultset ve formě <see cref="T:System.Data.DataTable"/>.
            </summary>
            <remarks>
            Je-li cmd.Connection otevřeno, nechá ho otevřené. Není-li, otevře si ho a zase zavře.
            </remarks>
            <param name="command"><see cref="T:System.Data.Common.DbCommand"/> k vykonání</param>
            <returns>první resultset příkazu ve formě <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataTable(System.String,System.Data.CommandType)">
            <summary>
            Vykoná příkaz commandText typu commandType a vrátí první tabulku resultsetu ve formě <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="commandText">SQL příkaz</param>
            <param name="commandType">typ příkazu</param>
            <returns>první tabulka resultsetu vykonaného příkazu ve formě <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataTable(System.String)">
            <summary>
            Vykoná příkaz commandText typu <see cref="F:System.Data.CommandType.Text"/> a vrátí první tabulku resultsetu ve formě <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="commandText">textový SQL příkaz</param>
            <returns>první tabulka resultsetu vykonaného příkazu ve formě <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Donastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> pomocí <see cref="T:System.Data.CommandBehavior"/> a vrátí výsledný resultset ve formě <see cref="T:System.Data.Common.DbDataReader"/>u.
            </summary>
            <param name="command">příkaz (nemusí mít nastaveno Connection)</param>
            <param name="behavior">požadované "chování"</param>
            <returns>resultset vykonaného příkazu jako <see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Donastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> a vrátí výsledný resultset ve formě <see cref="T:System.Data.Common.DbDataReader"/>u.
            </summary>
            <param name="command">příkaz (nemusí mít nastaveno Connection)</param>
            <returns>resultset vykonaného příkazu jako <see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteReader(System.String,System.Data.CommandType)">
            <summary>
            Vytvoří, nastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> dle zadaných parametrů a vrátí výsledný resultset ve formě <see cref="T:System.Data.Common.DbDataReader"/>u.
            </summary>
            <param name="commandText">text SQL příkazu</param>
            <param name="commandType">typ příkazu <see cref="T:System.Data.CommandType"/></param>
            <returns>resultset ve formě <see cref="T:System.Data.Common.DbDataReader"/>u</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteReader(System.String)">
            <summary>
            Vytvoří, nastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> dle zadaného SQL příkazu typu <see cref="F:System.Data.CommandType.Text"/>
            a vrátí výsledný resultset ve formě <see cref="T:System.Data.Common.DbDataReader"/>u.
            </summary>
            <param name="commandText">text SQL příkazu</param>
            <returns>resultset ve formě <see cref="T:System.Data.Common.DbDataReader"/>u</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataRecord(System.Data.Common.DbCommand,System.Data.CommandBehavior,Havit.Data.DataLoadPower)">
            <summary>
            Donastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> pomocí <see cref="T:System.Data.CommandBehavior"/> a vrátí první řádek první tabulky resultsetu
            ve formě <see cref="T:Havit.Data.DataRecord"/>. Pokud neexistuje, vrátí <c>null</c>.
            </summary>
            <param name="command">příkaz (nemusí mít nastaveno Connection)</param>
            <param name="behavior">požadované "chování"</param>
            <param name="dataLoadPower"><see cref="T:Havit.Data.DataLoadPower"/>, která se má použít pro <see cref="T:Havit.Data.DataRecord"/></param>
            <returns>první řádek první tabulky resultsetu ve formě <see cref="T:Havit.Data.DataRecord"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataRecord(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Donastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> pomocí <see cref="T:System.Data.CommandBehavior"/> a vrátí první řádek první tabulky resultsetu
            ve formě <see cref="T:Havit.Data.DataRecord"/>. Pokud neexistuje, vrátí <c>null</c>.
            </summary>
            <remarks>
            <see cref="T:Havit.Data.DataLoadPower"/> výsledného <see cref="T:Havit.Data.DataRecord"/>u nastaví na <see cref="F:Havit.Data.DataLoadPower.FullLoad"/>.
            </remarks>
            <param name="command">příkaz (nemusí mít nastaveno Connection)</param>
            <param name="behavior">požadované "chování"</param>
            <returns>první řádek první tabulky resultsetu ve formě <see cref="T:Havit.Data.DataRecord"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataRecord(System.Data.Common.DbCommand)">
            <summary>
            Donastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> a vrátí první řádek první tabulky resultsetu
            ve formě <see cref="T:Havit.Data.DataRecord"/>. Pokud neexistuje, vrátí <c>null</c>.
            </summary>
            <remarks>
            <see cref="T:Havit.Data.DataLoadPower"/> výsledného <see cref="T:Havit.Data.DataRecord"/>u nastaví na <see cref="F:Havit.Data.DataLoadPower.FullLoad"/>.
            </remarks>
            <param name="command">příkaz (nemusí mít nastaveno Connection)</param>
            <returns>první řádek první tabulky resultsetu ve formě <see cref="T:Havit.Data.DataRecord"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataRecord(System.String,System.Data.CommandType)">
            <summary>
            Vytvoří <see cref="T:System.Data.Common.DbCommand"/> dle zadaných parametrů, donasataví ho a vrátí první řádek první tabulky resultsetu
            ve formě <see cref="T:Havit.Data.DataRecord"/>. Pokud neexistuje, vrátí <c>null</c>.
            </summary>
            <remarks>
            <see cref="T:Havit.Data.DataLoadPower"/> výsledného <see cref="T:Havit.Data.DataRecord"/>u nastaví na <see cref="F:Havit.Data.DataLoadPower.FullLoad"/>.
            </remarks>
            <param name="commandText">text SQL příkazu</param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/> SQL příkazu</param>
            <returns>první řádek první tabulky resultsetu ve formě <see cref="T:Havit.Data.DataRecord"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteDataRecord(System.String)">
            <summary>
            Vytvoří, nastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> dle zadaného SQL příkazu
            a vrátí první řádek první tabulky resultsetu ve formě <see cref="T:Havit.Data.DataRecord"/>. Pokud neexistuje, vrátí <c>null</c>.
            </summary>
            <remarks>
            <see cref="T:Havit.Data.DataLoadPower"/> výsledného <see cref="T:Havit.Data.DataRecord"/>u nastaví na <see cref="F:Havit.Data.DataLoadPower.FullLoad"/>.
            </remarks>
            <param name="commandText">text SQL příkazu</param>
            <returns>první řádek první tabulky resultsetu ve formě <see cref="T:Havit.Data.DataRecord"/></returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Donastaví a vykoná <see cref="T:System.Data.Common.DbCommand"/> a vrátí první sloupec prvního řádku první tabulky jeho resultsetu.
            </summary>
            <example>
            int result = (int)ExecuteScalar(cmd);
            </example>
            <param name="command">příkaz (nemusí mít nastaveno Connection)</param>
            <returns>první sloupec prvního řádku první tabulky resultsetu</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteScalar(System.String,System.Data.CommandType)">
            <summary>
            Vytvoří ze zadaných parametrů <see cref="T:System.Data.Common.DbCommand"/>, nastaví, vykoná ho a vrátí první sloupec
            prvního řádku první tabulky jeho resultsetu.
            </summary>
            <param name="commandText">text SQL příkazu</param>
            <param name="commandType">typ příkazu</param>
            <returns>první sloupec prvního řádku první tabulky resultsetu</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteScalar(System.String)">
            <summary>
            Vytvoří <see cref="T:System.Data.Common.DbCommand"/> typu <see cref="F:System.Data.CommandType.Text"/>, vykoná ho a vrátí
            první sloupec prvního řádku první tabulky jeho resultsetu.
            </summary>
            <param name="commandText">text SQL příkazu typu <see cref="F:System.Data.CommandType.Text"/></param>
            <returns>první sloupec prvního řádku resultsetu</returns>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteTransaction(Havit.Data.DbTransactionDelegate,System.Data.Common.DbTransaction,System.Data.IsolationLevel)">
            <summary>
            Vykoná požadované kroky v rámci transakce.
            Pokud je outerTransaction <c>null</c>, je spuštěna a commitována nová.
            Pokud je outerTransaction zadáno, jsou požadované kroky v rámci ní pouze vykonány, pokud se shoduje IsolationLevel.
            Pokud se IsolationLevel neshoduje, založí se nová nested-transakce s požadovaným IsolationLevelem.
            </summary>
            <param name="transactionWork"><see cref="T:Havit.Data.DbTransactionDelegate"/> reprezentující s úkony, které mají být součástí transakce</param>
            <param name="outerTransaction">vnější transakce, pokud existuje; jinak <c>null</c></param>
            <param name="isolationLevel">požadovaný <see cref="T:System.Data.IsolationLevel"/> transakce; pokud je <see cref="F:System.Data.IsolationLevel.Unspecified"/>, použije se outerTransaction, pokud je definována, nebo založí nová transakce s defaultním isolation-levelem</param>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteTransaction(Havit.Data.DbTransactionDelegate,System.Data.Common.DbTransaction)">
            <summary>
            Vykoná požadované kroky v rámci transakce.
            Pokud je outerTransaction <c>null</c>, je spuštěna a commitována nová.
            Pokud je outerTransaction zadáno, jsou požadované kroky v rámci ní pouze vykonány.
            </summary>
            <remarks>
            Pokud je outerTransaction <c>null</c>, pak založí novou transakci s daným IsolationLevelem.
            Pokud je outerTransakce zadána, pak se pro zadaný transactionWork použije zadaný IsolationLevel a pak ho vrátí na původní hodnotu.
            </remarks>
            <param name="transactionWork"><see cref="T:Havit.Data.DbTransactionDelegate"/> reprezentující s úkony, které mají být součástí transakce</param>
            <param name="outerTransaction">vnější transakce, pokud existuje; jinak <c>null</c></param>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteTransaction(Havit.Data.DbTransactionDelegate,System.Data.IsolationLevel)">
            <summary>
            Vykoná požadované kroky v rámci transakce s daným isolation-levelem.
            </summary>
            <param name="transactionWork"><see cref="T:Havit.Data.DbTransactionDelegate"/> reprezentující s úkony, které mají být součástí transakce</param>
            <param name="isolationLevel">požadovaný <see cref="T:System.Data.IsolationLevel"/> transakce</param>
        </member>
        <member name="M:Havit.Data.DbConnector.ExecuteTransaction(Havit.Data.DbTransactionDelegate)">
            <summary>
            Vykoná požadované kroky v rámci transakce.
            Je spuštěna a commitována nová samostatná transakce.
            </summary>
            <param name="transactionWork"><see cref="T:Havit.Data.DbTransactionDelegate"/> reprezentující s úkony, které mají být součástí transakce</param>
        </member>
        <member name="P:Havit.Data.DbConnector.Default">
            <summary>
            Defaultní <see cref="T:Havit.Data.DbConnector"/>. Pokud není nastaven ručně, pak se vytvoří při prvním přístupu z defaultního connection-stringu načteného z .config souboru.
            Nastavením na null mohu pro příští přístup vynutit opětovnou inicializaci z .config souboru.
            </summary>
            <example>
            Buď <b>DefaultConnectionString</b> z konfigurační sekce &lt;connectionStrings&gt;:
            <code>
            &lt;configuration&gt;
            	&lt;connectionStrings&gt;
            		&lt;add name="DefaultConnectionString"
            			connectionString="Server=localhost;Database=pubs;UID=user;PWD=heslo;"
            			providerName="System.Data.SqlClient"
            		/&gt;
            	&lt;/connectionStrings&gt;
            &lt;/configuration&gt;
            </code>
            a nebo po staru <b>ConnectionString</b> z konfigurační sekce &lt;appStrings&gt;:
            <code>
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="ConnectionString" value="Server=localhost;Database=pubs;UID=user;PWD=heslo;" /&gt;
            	&lt;/appSettings&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:Havit.Data.DbConnector.GetDbConnectorFromDefaultConfig">
            <summary>
            Vrátí <see cref="T:System.Data.Common.DbConnection"/> inicializovaný defaulty z .config souboru.
            </summary>
            <remarks>Viz vlastnost <see cref="P:Havit.Data.DbConnector.Default"/>.</remarks>
        </member>
        <member name="T:Havit.Data.DbTransactionDelegate">
            <summary>
            Reprezentuje metodu, která vykonává jednotlivé kroky transakce.
            </summary>
            <param name="transaction">transakce, v rámci které mají být jednotlivé kroky vykonány</param>	
        </member>
        <member name="T:Havit.Data.Extensions.DbCommandExt">
            <summary>
            Extension methody k DbCommend.
            </summary>
        </member>
        <member name="M:Havit.Data.Extensions.DbCommandExt.ExecuteNonQueryWithRetry(System.Data.Common.DbCommand)">
            <summary>
            Volá ExecuteNonQuery. V případě neúspěchu z důvodu transientní chyby pokus opakuje.
            </summary>
        </member>
        <member name="M:Havit.Data.Extensions.DbCommandExt.ExecuteScalarWithRetry(System.Data.Common.DbCommand)">
            <summary>
            Volá ExecuteScalar. V případě neúspěchu z důvodu transientní chyby pokus opakuje.
            </summary>
        </member>
        <member name="M:Havit.Data.Extensions.DbCommandExt.ExecuteReaderWithRetry(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Volá ExecuteReader. V případě neúspěchu z důvodu transientní chyby pokus opakuje.
            </summary>
        </member>
        <member name="M:Havit.Data.Extensions.DbCommandExt.CanRetryCommand(System.Data.Common.DbCommand)">
            <summary>
            Vrací true, pokud je možné command zopakovat.
            To je možné tehdy, pokud není uzavřeno spojení.
            </summary>
        </member>
        <member name="T:Havit.Data.Extensions.DbConnectionExt">
            <summary>
            Extension methody k DbConnection.
            </summary>
        </member>
        <member name="M:Havit.Data.Extensions.DbConnectionExt.OpenWithRetry(System.Data.Common.DbConnection)">
            <summary>
            Otevírá databázové spojení. V případě neúspěchu z důvodu transientní chyby pokus o otevření opakuje.
            </summary>
        </member>
        <member name="T:Havit.Data.SqlServer.SqlServerPlatform">
            <summary>
            Platforma (verze) Microsoft SQL Serveru.
            </summary>
        </member>
        <member name="F:Havit.Data.SqlServer.SqlServerPlatform.SqlServerCe35">
            <summary>
            Microsoft SQL Server Compact Edition 3.5
            </summary>
        </member>
        <member name="F:Havit.Data.SqlServer.SqlServerPlatform.SqlServer2005">
            <summary>
            Microsoft SQL Server 2005
            </summary>
        </member>
        <member name="F:Havit.Data.SqlServer.SqlServerPlatform.SqlServer2008">
            <summary>
            Microsoft SQL Server 2008
            </summary>
        </member>
        <member name="F:Havit.Data.SqlServer.SqlServerPlatform.SqlServer2012">
            <summary>
            Microsoft SQL Server 2012
            </summary>
        </member>
        <member name="T:Havit.Data.SqlTypes.IntTable">
            <summary>
            Pomocné metody pro práci s typem IntTable pro (table value parameter).
            </summary>
        </member>
        <member name="M:Havit.Data.SqlTypes.IntTable.GetSqlParameterValue(System.Int32[])">
            <summary>
            Vytvoří hodnotu pro SqlParameter předávající dané pole integerů.
            Pokud je ids null nebo neobsahuje žádný záznam, vrací null.
            (Prázdné pole nelze předat (exception), takže buď se předává null nebo pole, které má alespoň jednu hodnotu.)
            Pokud obsahuje pole integerů duplicity, jsou odstraněny (každá hodnota se posílá jen jednou).
            </summary>		
            <param name="ids">Parametry, pro každý je vytvořen jeden SqlDataRecord.</param>
        </member>
        <member name="T:Havit.Data.SqlTypes.SqlSmallDateTime">
            <summary>
            Reprezentuje pomocné hodnoty pro databázový typ smalldatetime.
            </summary>
        </member>
        <member name="F:Havit.Data.SqlTypes.SqlSmallDateTime.MinValue">
            <summary>
            Minimální hodnota použitelná pro databázový typ smalldatetime.
            </summary>
        </member>
        <member name="F:Havit.Data.SqlTypes.SqlSmallDateTime.MaxValue">
            <summary>
            Maximální hodnota použitelná pro databázový typ smalldatetime.
            </summary>
        </member>
        <member name="P:Havit.Data.SqlTypes.SqlSmallDateTime.Value">
            <summary>
            Hodnota reprezentovaná jako DateTime.
            </summary>
        </member>
        <member name="T:Havit.Data.Trace.DbCommandTraceData">
            <summary>
            Trace data for DbCommand.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbCommandTraceData.Operation">
            <summary>
            Command operation.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbCommandTraceData.CommandText">
            <summary>
            Command text.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbCommandTraceData.TransactionHashCode">
            <summary>
            Transaction hash code.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbCommandTraceData.Parameters">
            <summary>
            Command parameters.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbCommandTraceData.DurationTicks">
            <summary>
            Command execution duration (ticks).
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbCommandTraceData.ResultSet">
            <summary>
            Command result set flag.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbCommandTraceData.Result">
            <summary>
            Command result.
            </summary>
        </member>
        <member name="M:Havit.Data.Trace.DbCommandTraceData.#ctor">
            <summary>
            Konstruktor.
            </summary>
        </member>
        <member name="M:Havit.Data.Trace.DbCommandTraceData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Havit.Data.Trace.DbCommandTraceData.Create(System.Data.Common.DbCommand,System.String)">
            <summary>
            Creates an instance of DbCommandTraceData from DbCommand.
            </summary>
        </member>
        <member name="T:Havit.Data.Trace.DbConnectorTrace">
            <summary>
            Trace data for DbCommand.
            </summary>
        </member>
        <member name="M:Havit.Data.Trace.DbConnectorTrace.#ctor(System.Data.Common.DbCommand,System.String)">
            <summary>
            Konstruktor.
            </summary>
        </member>
        <member name="M:Havit.Data.Trace.DbConnectorTrace.SetResult(System.Object)">
            <summary>
            Set command result.
            </summary>
        </member>
        <member name="M:Havit.Data.Trace.DbConnectorTrace.Trace(System.Diagnostics.TraceSource)">
            <summary>
            Set DurationProperty and traces on TraceSource.
            </summary>
        </member>
        <member name="T:Havit.Data.Trace.DbParameterTraceData">
            <summary>
            Trace data for DbParameter.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbParameterTraceData.ParameterName">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbParameterTraceData.Direction">
            <summary>
            Parameter direction.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbParameterTraceData.DbType">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="P:Havit.Data.Trace.DbParameterTraceData.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Havit.Data.Trace.DbParameterTraceData.Create(System.Data.Common.DbParameter)">
            <summary>
            Creates an instance of DbParameterTraceData from DbParameter.
            </summary>
        </member>
        <member name="T:Havit.Data.TransientErrorHandling.IRetryPolicy">
            <summary>
            Získává informaci o tom, zda má být pokus o provedení dané akce v případě neúspěchu opakován.
            </summary>
        </member>
        <member name="M:Havit.Data.TransientErrorHandling.IRetryPolicy.GetRetryPolicyInfo(System.Int32,System.Exception)">
            <summary>
            Vrací informaci o tom, jestli má být proveden další pokus a s jakým odstupem.
            </summary>
        </member>
        <member name="T:Havit.Data.TransientErrorHandling.RetryPolicyInfo">
            <summary>
            Informace o záměru opakovat akci, jež selhala.
            </summary>
        </member>
        <member name="P:Havit.Data.TransientErrorHandling.RetryPolicyInfo.RetryAttempt">
            <summary>
            Indikuje, zda má být pokus opakován.
            </summary>
        </member>
        <member name="P:Havit.Data.TransientErrorHandling.RetryPolicyInfo.DelayBeforeRetry">
            <summary>
            Indikuje čas čekání před dalším pokusem.
            </summary>
        </member>
        <member name="T:Havit.Data.TransientErrorHandling.TransientErrorHandler">
            <summary>
            Provádí akci s opakováním v případě selhání.
            </summary>
        </member>
        <member name="M:Havit.Data.TransientErrorHandling.TransientErrorHandler.ExecuteAction``1(System.Func{``0},System.Func{System.Boolean})">
            <summary>
            Provádí danou akci, opakování se řídí výchozí TransientErrorRetryPolicy.
            </summary>
        </member>
        <member name="M:Havit.Data.TransientErrorHandling.TransientErrorHandler.ExecuteAction``1(System.Func{``0},System.Func{System.Boolean},Havit.Data.TransientErrorHandling.IRetryPolicy)">
            <summary>
            Provádí danou akci, opakování se řídí předanou danou RetryPolicy.
            </summary>
        </member>
        <member name="T:Havit.Data.TransientErrorHandling.TransientErrorRetryPolicy">
            <summary>
            Získává informaci o tom, zda má být pokus o provedení dané akce v případě neúspěchu opakován.
            Opakovány jsou SQL transientní chyby až do počtu pokusů dle parametru v konstruktoru.
            </summary>
        </member>
        <member name="M:Havit.Data.TransientErrorHandling.TransientErrorRetryPolicy.#ctor">
            <summary>
            Konstruktor pro výchozí chování - 3 pokusy, druhý a třetí pokus jsou s odstupem 10 sekund.
            </summary>
        </member>
        <member name="M:Havit.Data.TransientErrorHandling.TransientErrorRetryPolicy.#ctor(System.Int32,System.Int32[])">
            <summary>
            Konstruktor.
            </summary>
            <param name="maxAttempts">Maximální počet provedených pokusů.</param>
            <param name="delays">Odstupy mezi jednotlivými pokusy v milisekundách. Pole nesmí být prázdné.</param>
        </member>
        <member name="M:Havit.Data.TransientErrorHandling.TransientErrorRetryPolicy.GetRetryPolicyInfo(System.Int32,System.Exception)">
            <summary>
            Vrací informaci o tom, jestli má být proveden další pokus a s jakým odstupem.
            </summary>
        </member>
        <member name="T:Havit.Data.SqlDatabaseTransientErrorDetectionStrategy">
            <summary>
            Provides the transient error detection logic for transient faults that are specific to SQL Database.
            </summary>
        </member>
        <member name="T:Havit.Data.SqlDatabaseTransientErrorDetectionStrategy.ProcessNetLibErrorCode">
            <summary>
            Error codes reported by the DBNETLIB module.
            </summary>
        </member>
        <member name="M:Havit.Data.SqlDatabaseTransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>true if the specified exception is considered as transient; otherwise, false.</returns>
        </member>
    </members>
</doc>
