using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Castle.Components.DictionaryAdapter;
using Microsoft.EntityFrameworkCore;
using Havit.Data.EntityFrameworkCore.Patterns.DataSeeds;
using Havit.Data.EntityFrameworkCore.Patterns.Tests.Infrastructure;
using Havit.Data.Patterns.DataSeeds;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Havit.Data.EntityFrameworkCore.Patterns.Tests.DataSeeds
{
	[TestClass]
	public class DbDataSeedPersisterTests
	{
		[TestMethod]
		public void DbDataSeedPersister_CheckConditions_EntityWithoutGeneratedKey()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			DataSeedConfiguration<ItemWithoutGeneratedKey> configuration = new DataSeedConfiguration<ItemWithoutGeneratedKey>(new ItemWithoutGeneratedKey[0]);
			configuration.PairByExpressions = new List<Expression<Func<ItemWithoutGeneratedKey, object>>> { item => item.Id };

			// Act
			persister.CheckConditions(configuration);

			// Assert
			// no exception was thrown
		}

		[TestMethod]
		[ExpectedException(typeof(InvalidOperationException))]
		public void DbDataSeedPersister_CheckConditions_EntityWithAutogeneratedKey()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			DataSeedConfiguration<ItemWithAutogeneratedKey> configuration = new DataSeedConfiguration<ItemWithAutogeneratedKey>(new ItemWithAutogeneratedKey[0]);
			configuration.PairByExpressions = new List<Expression<Func<ItemWithAutogeneratedKey, object>>> { item => item.Id };

			// Act
			persister.CheckConditions(configuration);

			// Assert
			// no exception was thrown
		}

		[TestMethod]
		public void DbDataSeedPersister_CheckConditions_EntityWithKeyGeneratedBySequence()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			DataSeedConfiguration<ItemWithKeyGeneratedBySequence> configuration = new DataSeedConfiguration<ItemWithKeyGeneratedBySequence>(new ItemWithKeyGeneratedBySequence[0]);
			configuration.PairByExpressions = new List<Expression<Func<ItemWithKeyGeneratedBySequence, object>>> { item => item.Id };

			// Act
			persister.CheckConditions(configuration);

			// Assert
			// no exception was thrown
		}

		[TestMethod]
		public void DbDataSeedPersister_GetPropertiesForInserting_EntityWithoutGeneratedKey()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			// Act
			var result = persister.GetPropertiesForInserting(dbContext.Model.FindEntityType(typeof(ItemWithoutGeneratedKey)));

			// Assert
			Assert.AreEqual(2, result.Count);
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithoutGeneratedKey.Value)));
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithoutGeneratedKey.Id))); // není automaticky generované, budeme hodnotu nastavovat
		}

		[TestMethod]
		public void DbDataSeedPersister_GetPropertiesForInserting_EntityWithAutogeneratedKey()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);
			
			// Act
			var result = persister.GetPropertiesForInserting(dbContext.Model.FindEntityType(typeof(ItemWithAutogeneratedKey)));

			// Assert
			Assert.AreEqual(1, result.Count);
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithAutogeneratedKey.Symbol)));
			Assert.IsFalse(result.Any(item => item.Name == nameof(ItemWithAutogeneratedKey.Id))); // automaticky generované, nebudeme hodnotu nastavovat
		}

		[TestMethod]
		public void DbDataSeedPersister_GetPropertiesForInserting_EntityWithKeyGeneratedBySequence()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			// Act
			var result = persister.GetPropertiesForInserting(dbContext.Model.FindEntityType(typeof(ItemWithKeyGeneratedBySequence)));

			// Assert
			Assert.AreEqual(2, result.Count);
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithKeyGeneratedBySequence.Value)));
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithKeyGeneratedBySequence.Id))); // je volitelně generované sekvencí, budeme hodnotu nastavovat
		}

		[TestMethod]
		public void DbDataSeedPersister_GetPropertiesForUpdating_EntityWithoutGeneratedKey()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			// Act
			var result = persister.GetPropertiesForUpdating<ItemWithoutGeneratedKey>(dbContext.Model.FindEntityType(typeof(ItemWithoutGeneratedKey)), null);

			// Assert
			Assert.AreEqual(1, result.Count);
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithoutGeneratedKey.Value)));
			Assert.IsFalse(result.Any(item => item.Name == nameof(ItemWithAutogeneratedKey.Id))); // primární klíč nelze aktualizovat
		}

		[TestMethod]
		public void DbDataSeedPersister_GetPropertiesForUpdating_EntityWithAutogeneratedKey()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			// Act
			var result = persister.GetPropertiesForUpdating<ItemWithAutogeneratedKey>(dbContext.Model.FindEntityType(typeof(ItemWithAutogeneratedKey)), null);

			// Assert
			Assert.AreEqual(1, result.Count);
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithAutogeneratedKey.Symbol)));
			Assert.IsFalse(result.Any(item => item.Name == nameof(ItemWithAutogeneratedKey.Id))); // primární klíč nelze aktualizovat
		}

		[TestMethod]
		public void DbDataSeedPersister_GetPropertiesForUpdating_EntityWithKeyGeneratedBySequence()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			// Act
			var result = persister.GetPropertiesForUpdating<ItemWithKeyGeneratedBySequence>(dbContext.Model.FindEntityType(typeof(ItemWithKeyGeneratedBySequence)), null);

			// Assert
			Assert.AreEqual(1, result.Count);
			Assert.IsTrue(result.Any(item => item.Name == nameof(ItemWithKeyGeneratedBySequence.Value)));
			Assert.IsFalse(result.Any(item => item.Name == nameof(ItemWithKeyGeneratedBySequence.Id))); // primární klíč nelze aktualizovat
		}

		[TestMethod]
		public void DbDataSeedPersister_GetPropertiesForUpdating_DoesNotReturnExcludedProperties()
		{
			// Arrange
			var dbContext = new DbDataSeedPersisterTestsDbContext();
			var persister = new DbDataSeedPersister(dbContext);

			// Act
			var result = persister.GetPropertiesForUpdating<ItemWithAutogeneratedKey>(
				dbContext.Model.FindEntityType(typeof(ItemWithAutogeneratedKey)),
				new List<Expression<Func<ItemWithAutogeneratedKey, object>>> { item => item.Id, item => item.Symbol });

			// Assert
			Assert.AreEqual(0, result.Count);
		}

		internal class DbDataSeedPersisterTestsDbContext : Havit.Data.EntityFrameworkCore.DbContext
		{
			protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
			{
				base.OnConfiguring(optionsBuilder);

				optionsBuilder.UseInMemoryDatabase(nameof(DbDataSeedPersisterTests));
			}

			protected override void CustomizeModelCreating(ModelBuilder modelBuilder)
			{
				base.CustomizeModelCreating(modelBuilder);
				
				modelBuilder.HasSequence<int>("MySequence");

				modelBuilder.Entity<ItemWithAutogeneratedKey>();
				modelBuilder.Entity<ItemWithoutGeneratedKey>();
				modelBuilder.Entity<ItemWithKeyGeneratedBySequence>().Property(i => i.Id).HasDefaultValueSql("NEXT VALUE FOR MySequence");
			}
		}

		internal class ItemWithAutogeneratedKey
		{
			public int Id { get; set; }

			public string Symbol { get; set; }
		}

		internal class ItemWithoutGeneratedKey
		{
			[DatabaseGenerated(DatabaseGeneratedOption.None)]
			public int Id { get; set; }

			public string Value { get; set; }
		}

		internal class ItemWithKeyGeneratedBySequence
		{
			public int Id { get; set; }

			public string Value { get; set; }
		}

	}
}
